Date: 2025-04-06
Topic:
  - link: https://blogs.nvidia.co.jp/blog/nintendo-switch-2-leveled-up-with-nvidia-ai-powered-dlss-and-4k-gaming/
    text: ""
  - link: 
    text: |
      title: AIが旅行計画も、動画作成も、電話予約までこなす時代に？ Gensparkの新スーパーエージェントが凄い！
      body: 「AIって、チャットで質問に答えてくれるだけじゃないの？」

      そんな風に思っていませんか？ 実は、AIの世界はものすごいスピードで進化していて、私たちの「日常業務」を実際に肩代わりしてくれる存在になりつつあるんです。

      今回ご紹介するのは、まさにそんな未来を感じさせてくれるGenspark AIの新しい「Gensparkスーパーエージェント」を紹介するこちらの動画。


      「ただの紹介動画でしょ？」と思うなかれ。この動画でデモンストレーションされている機能が、本当に「未来キタ！」と思わせてくれるレベルなんです。


      目次
      スーパーエージェントの実力
      1. 複雑な旅行計画＆まさかの「AI電話予約」
      2. プロ級の動画コンテンツも自動生成！
      なぜGensparkスーパーエージェントはこんなに凄いのか？
      実際に使ってみた
      まとめ：AIが「行動」する時代へ
      ポノテク株式会社について
      スーパーエージェントの実力
      百聞は一見に如かず。動画の中から、特に「これは凄い！」と思ったシーンをいくつかご紹介します。

      1. 複雑な旅行計画＆まさかの「AI電話予約」
      動画では、CEOのEricさんがスーパーエージェントに「5日間のサンディエゴ旅行」を計画させるデモを行っています。

      「1日3か所まで、各90分以上滞在」

      「公共交通機関利用、歩きは最小限」

      「最高のシーフードレストランを予約」

      「見た目も美しい旅程表で」

      といった、かなり複雑な要求を出したのですが…

      画像
      スーパーエージェントは、旅行ツール、リサーチツール、地図ツールなどを連携させて、あっという間に条件を満たす詳細な旅程表を作成！

      画像
      そして、ここからが本番。 Ericさんは「この旅行のレストラン予約、全部やっといて」と指示。すると、スーパーエージェントは「Call For Me（電話代行）」機能を発動！

      なんと、AIが人間のような自然な声でレストランに電話をかけ、自動応答システムを突破し、人間のオペレーターと会話して予約を完了させてしまうんです！ アレルギー対応や座席の希望（窓際）まで伝えていて、もう唖然…。

      画像
      動画の最後では「Nvidiaの最新チップを探すために、AIが100件電話するのを想像してみてください。どれだけ便利か！」と語られていますが、本当にそんな未来がすぐそこまで来ていることを感じさせます。

      2. プロ級の動画コンテンツも自動生成！
      「料理動画をインスタのリール用に作りたいけど、編集スキルがない…」
      「先週のニュースを元に、サウスパーク風のアニメを作ってみたい！」

      そんな無茶ぶりにも、スーパーエージェントは応えてくれます。

      ▼ 料理リール動画の作成
      レシピをリサーチし、各工程の動画クリップを生成。さらに、効果音まで自動で付けて、あっという間におしゃれなリール動画が完成！

      画像
      ▼ サウスパーク風アニメ
      最新ニュース（動画では"SignalGate"という話題）を元に、皮肉の効いたサウスパーク風の脚本を作成。キャラクターのアニメーション動画を生成し、各キャラの声までテキスト読み上げ（TTS）で作成して、短いアニメエピソードを完成させていました。

      画像
      動画編集ソフトやアニメ制作の知識がなくても、アイデアさえあればAIが形にしてくれる。クリエイティブのあり方が根本から変わりそうです。

      3. あらゆる職種・用途に対応する汎用性

      動画の後半では、さらに多様なユースケースが紹介されています。

      マーケター: インフルエンサーを探し、最適なメール文面を作成してアプローチ。

      数学教師: 複雑な数式を3Dで可視化。

      採用担当者: LinkedInプロフィールを分析し、最適な候補者をマッチング。

      デザイナー: ブランド（例：メルセデス・ベンツ）のキャンペーンポスターやWebサイトをデザイン。

      コンテンツ制作者: 長時間のYouTube動画を要約し、プレゼン資料に変換。

      音楽アナリスト: 世界の音楽ストリーミングトレンドを調査し、視覚的なレポートを作成。

      画像
      画像
      画像
      画像
      画像
      画像
      まさに「For Everyone, Everyday（すべての人の、毎日のために）」設計されていることが伝わってきます。

      なぜGensparkスーパーエージェントはこんなに凄いのか？
      動画の最後では、その秘密も少し明かされています。Gensparkスーパーエージェントは、単一の巨大AIではなく、

      LLMs (大規模言語モデル): 9つの異なるサイズのモデルを組み合わせた「Mixture-of-Agents」システム

      Toolsets (ツールセット): 80以上の信頼できる自社製ツール

      Datasets (データセット): 10以上のプレミアムな自社製データセット

      これら3つを高度に連携させることで、高速性・信頼性・そしてユーザーの意図通りに動作する制御性（Steerability）を実現しているとのこと。

      画像
      実際に使ってみた
      実際にスーパーエージェントを使ってみました。今回私がやりたかったことは、clerkという認証サービスの開発マニュアルをマークダウンで作成することです。clerkは、開発者用のドキュメントをウェブサイトで公開しており、その内容をマークダウンにしてもらうことで、LLMで最新の開発方法を参照できるようにすることが目的です。

      それでは実行していきましょう。スーパーエージェントには、以下のプロンプトを入力しました。

      https://clerk.com/docs以下の内容を全て抽出し、clerkとNext.jsを使用した完全な開発マニュアルをマークダウンで出力してください。

      以下は生成中の様子です。約2分で生成完了しました。

      画像
      以下が生成結果です。しっかりNext.js版のclerkの使用方法を抽出し、マークダウンで出力してくれました。これ以外にも様々な使い方が考えられます。

      # Clerk と Next.js を使用した認証実装マニュアル

      ## 目次

      1. [はじめに](#はじめに)
      2. [Clerk の概要](#clerk-の概要)
      3. [セットアップ手順](#セットアップ手順)
        - [Clerk アカウントの作成](#clerk-アカウントの作成)
        - [Next.js プロジェクトの準備](#nextjs-プロジェクトの準備)
        - [@clerk/nextjs のインストール](#clerknextjs-のインストール)
      4. [基本的な実装](#基本的な実装)
        - [環境変数の設定](#環境変数の設定)
        - [clerkMiddleware() の設定](#clerkmiddleware-の設定)
        - [ClerkProvider の設定](#clerkprovider-の設定)
      5. [認証コンポーネントの実装](#認証コンポーネントの実装)
        - [SignIn コンポーネント](#signin-コンポーネント)
        - [SignUp コンポーネント](#signup-コンポーネント)
        - [UserButton コンポーネント](#userbutton-コンポーネント)
      6. [認証情報の取得と活用](#認証情報の取得と活用)
        - [クライアントサイドでの認証情報の取得](#クライアントサイドでの認証情報の取得)
        - [サーバーサイドでの認証情報の取得](#サーバーサイドでの認証情報の取得)
      7. [ルート保護の実装](#ルート保護の実装)
        - [ミドルウェアによるルート保護](#ミドルウェアによるルート保護)
        - [コンポーネントレベルでのルート保護](#コンポーネントレベルでのルート保護)
      8. [サーバーアクションとAPIルートでの認証](#サーバーアクションとapiルートでの認証)
      9. [カスタマイズとテーマ設定](#カスタマイズとテーマ設定)
      10. [高度な機能](#高度な機能)
          - [Organization（組織）機能](#organization組織機能)
          - [OAuth認証](#oauth認証)
          - [多要素認証](#多要素認証)
      11. [トラブルシューティング](#トラブルシューティング)
      12. [参考リソース](#参考リソース)

      ## はじめに

      このマニュアルでは、Clerk認証サービスをNext.jsアプリケーションに統合する方法を詳しく説明します。ClerkはモダンなWeb開発のための認証・ユーザー管理プラットフォームで、Next.jsと特に相性が良く、App RouterとPages Routerの両方をサポートしています。

      ## Clerk の概要

      Clerkは以下の機能を提供します：

      - **完全なユーザー管理**: サインアップ、サインイン、プロフィール管理などを数分で実装
      - **複数の認証戦略**: メールアドレス/パスワード、ソーシャルログイン、SSO、多要素認証などをサポート
      - **セキュリティ機能**: アカウントセキュリティを第一に考慮した機能
      - **カスタマイズ可能なコンポーネント**: アプリに合わせてデザインを調整可能

      ## セットアップ手順

      ### Clerk アカウントの作成

      1. [Clerk Dashboard](https://dashboard.clerk.com/)にアクセスして、アカウントを作成します
      2. 新しいアプリケーションを作成
      3. APIキー（Publishable KeyとSecret Key）をメモします

      ### Next.js プロジェクトの準備

      新しいNext.jsプロジェクトを作成するか、既存のプロジェクトを使用します：

      ```bash
      # 新しいプロジェクトの作成
      npx create-next-app@latest my-clerk-app
      cd my-clerk-app
      ```

      ### @clerk/nextjs のインストール

      Clerkの次のSDKをインストールします：

      ```bash
      npm install @clerk/nextjs
      ```

      ## 基本的な実装

      ### 環境変数の設定

      プロジェクトのルートディレクトリに`.env.local`ファイルを作成し、Clerkの認証情報を設定します：

      ```env
      # .env.local
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_*************
      CLERK_SECRET_KEY=sk_test_*************

      # オプション: サインインとサインアップページのルートを設定
      NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
      NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/
      ```

      ### clerkMiddleware() の設定

      プロジェクトのルートに`middleware.ts`ファイルを作成します（srcディレクトリを使用している場合は`src/middleware.ts`）：

      ```typescript
      // middleware.ts
      import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

      // 保護したいルートを定義
      const isProtectedRoute = createRouteMatcher([
        '/dashboard(.*)',
        '/profile(.*)',
        '/api/protected(.*)'
      ]);

      export default clerkMiddleware({
        // ミドルウェアの動作をカスタマイズするオプション
        debug: process.env.NODE_ENV === 'development',
        // 追加の設定が必要な場合はここに追加
      });

      // ミドルウェアの適用範囲を設定
      export const config = {
        matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],
      };
      ```

      ### ClerkProvider の設定

      App Routerを使用する場合の例：

      ```tsx
      // app/layout.tsx
      import { ClerkProvider } from '@clerk/nextjs';
      import { Inter } from 'next/font/google';
      import './globals.css';

      const inter = Inter({ subsets: ['latin'] });

      export default function RootLayout({
        children,
      }: {
        children: React.ReactNode;
      }) {
        return (
          <ClerkProvider>
            <html lang="ja">
              <body className={inter.className}>{children}</body>
            </html>
          </ClerkProvider>
        );
      }
      ```

      ## 認証コンポーネントの実装

      ### SignIn コンポーネント

      サインインページを作成します：

      ```tsx
      // app/sign-in/page.tsx
      import { SignIn } from '@clerk/nextjs';

      export default function SignInPage() {
        return (
          <div className="flex justify-center items-center min-h-screen">
            <SignIn 
              appearance={{
                elements: {
                  formButtonPrimary: 'bg-blue-500 hover:bg-blue-600 text-white'
                }
              }}
            />
          </div>
        );
      }
      ```

      ### SignUp コンポーネント

      サインアップページを作成します：

      ```tsx
      // app/sign-up/page.tsx
      import { SignUp } from '@clerk/nextjs';

      export default function SignUpPage() {
        return (
          <div className="flex justify-center items-center min-h-screen">
            <SignUp
              appearance={{
                elements: {
                  formButtonPrimary: 'bg-blue-500 hover:bg-blue-600 text-white'
                }
              }}
            />
          </div>
        );
      }
      ```

      ### UserButton コンポーネント

      ユーザープロフィールボタンをナビゲーションバーに追加します：

      ```tsx
      // components/Navbar.tsx
      import { UserButton, SignInButton, SignUpButton } from '@clerk/nextjs';
      import { SignedIn, SignedOut } from '@clerk/nextjs';
      import Link from 'next/link';

      export default function Navbar() {
        return (
          <nav className="flex justify-between items-center p-4 bg-white shadow">
            <Link href="/" className="text-lg font-bold">
              マイアプリ
            </Link>
            
            <div className="flex gap-4 items-center">
              <SignedIn>
                {/* ユーザーがサインインしている場合に表示 */}
                <Link href="/dashboard">ダッシュボード</Link>
                <UserButton afterSignOutUrl="/" />
              </SignedIn>
              
              <SignedOut>
                {/* ユーザーがサインアウトしている場合に表示 */}
                <SignInButton mode="modal">
                  <button className="px-4 py-2 rounded bg-gray-100 hover:bg-gray-200">
                    サインイン
                  </button>
                </SignInButton>
                
                <SignUpButton mode="modal">
                  <button className="px-4 py-2 rounded bg-blue-500 text-white hover:bg-blue-600">
                    サインアップ
                  </button>
                </SignUpButton>
              </SignedOut>
            </div>
          </nav>
        );
      }
      ```

      ## 認証情報の取得と活用

      ### クライアントサイドでの認証情報の取得

      クライアントコンポーネントでは、Clerkの提供するフックを使用して認証情報を取得できます：

      ```tsx
      // components/ProfileCard.tsx
      'use client';
      import { useUser, useAuth } from '@clerk/nextjs';

      export default function ProfileCard() {
        const { user } = useUser();
        const { isLoaded, isSignedIn } = useAuth();
        
        if (!isLoaded) {
          return <div>Loading...</div>;
        }
        
        if (!isSignedIn) {
          return <div>サインインが必要です</div>;
        }
        
        return (
          <div className="p-4 border rounded-lg">
            <div className="flex items-center gap-4">
              <img 
                src={user?.imageUrl} 
                alt="Profile" 
                className="w-16 h-16 rounded-full"
              />
              <div>
                <h2 className="text-xl font-bold">{user?.fullName || 'ユーザー'}</h2>
                <p className="text-gray-600">{user?.primaryEmailAddress?.emailAddress}</p>
              </div>
            </div>
          </div>
        );
      }
      ```

      ### サーバーサイドでの認証情報の取得

      App Routerのサーバーコンポーネントでは、`auth()`と`currentUser()`ヘルパーを使用できます：

      ```tsx
      // app/dashboard/page.tsx
      import { auth, currentUser } from '@clerk/nextjs/server';
      import { redirect } from 'next/navigation';

      export default async function DashboardPage() {
        const { userId } = auth();
        
        // 未認証ユーザーをサインインページにリダイレクト
        if (!userId) {
          redirect('/sign-in');
        }
        
        // ユーザー情報の取得
        const user = await currentUser();
        
        return (
          <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">ダッシュボード</h1>
            <p>こんにちは、{user?.firstName || 'ユーザー'}さん！</p>
            
            {/* ダッシュボードの内容 */}
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* ダッシュボードコンテンツ */}
            </div>
          </div>
        );
      }
      ```

      ## ルート保護の実装

      ### ミドルウェアによるルート保護

      `middleware.ts`ファイルを拡張して、特定のルートを保護します：

      ```typescript
      // middleware.ts
      import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';
      import { NextResponse } from 'next/server';

      // 保護したいルートを定義
      const isProtectedDashboardRoute = createRouteMatcher([
        '/dashboard(.*)',
        '/profile(.*)',
      ]);

      // 組織管理者のみアクセス可能なルート
      const isAdminRoute = createRouteMatcher([
        '/admin(.*)',
      ]);

      export default clerkMiddleware((auth, req) => {
        // auth.protect()を使用して認証状態に基づいてリダイレクト
        if (isProtectedDashboardRoute(req)) {
          return auth.protect();
        }
        
        // 管理者権限チェック
        if (isAdminRoute(req)) {
          const { userId, has } = auth;
          
          // 未認証ユーザーをサインインページへリダイレクト
          if (!userId) {
            return NextResponse.redirect(new URL('/sign-in', req.url));
          }
          
          // 管理者権限がない場合、ダッシュボードへリダイレクト
          if (!has({ permission: 'org:admin' })) {
            return NextResponse.redirect(new URL('/dashboard', req.url));
          }
        }
        
        return NextResponse.next();
      });

      export const config = {
        matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],
      };
      ```

      ### コンポーネントレベルでのルート保護

      Clerkの`<Protect>`コンポーネントを使用して、特定のコンポーネントへのアクセスを制限します：

      ```tsx
      // app/settings/page.tsx
      import { Protect } from '@clerk/nextjs';

      export default function SettingsPage() {
        return (
          <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">設定</h1>
            
            {/* 認証ユーザーのみアクセス可能 */}
            <Protect>
              <div className="mt-4">
                <h2 className="text-xl font-semibold">アカウント設定</h2>
                {/* 設定フォーム */}
              </div>
            </Protect>
            
            {/* 組織管理者のみアクセス可能 */}
            <Protect permission="org:admin">
              <div className="mt-8">
                <h2 className="text-xl font-semibold">管理者設定</h2>
                {/* 管理者設定フォーム */}
              </div>
            </Protect>
          </div>
        );
      }
      ```

      ## サーバーアクションとAPIルートでの認証

      App Routerのサーバーアクションで認証情報を活用：

      ```tsx
      // app/actions.ts
      'use server';

      import { auth, currentUser } from '@clerk/nextjs/server';
      import { revalidatePath } from 'next/cache';

      export async function updateUserProfile(formData: FormData) {
        const { userId } = auth();
        
        // 未認証の場合はエラー
        if (!userId) {
          throw new Error('認証が必要です');
        }
        
        const user = await currentUser();
        
        // プロフィール更新処理
        const name = formData.get('name') as string;
        // データベースの更新処理
        
        // キャッシュの更新
        revalidatePath('/profile');
        
        return { success: true };
      }
      ```

      APIルートでの認証：

      ```typescript
      // app/api/protected/route.ts
      import { auth } from '@clerk/nextjs/server';
      import { NextResponse } from 'next/server';

      export async function GET() {
        const { userId } = auth();
        
        if (!userId) {
          return NextResponse.json({ error: '認証が必要です' }, { status: 401 });
        }
        
        // 認証されたユーザー向けのAPI処理
        return NextResponse.json({
          message: '認証済みデータ',
          userId
        });
      }
      ```

      ## カスタマイズとテーマ設定

      Clerkコンポーネントのデザインをカスタマイズするには、`appearance`プロパティを使用します：

      ```tsx
      // app/layout.tsx
      import { ClerkProvider } from '@clerk/nextjs';

      const clerkAppearance = {
        elements: {
          formButtonPrimary: 'bg-blue-500 hover:bg-blue-600 text-white',
          card: 'bg-white shadow-sm rounded-lg',
          headerTitle: 'text-2xl font-bold text-gray-900',
          headerSubtitle: 'text-base text-gray-600',
          socialButtonsIconButton: 'border border-gray-300 hover:bg-gray-100',
          formFieldLabel: 'text-gray-700 font-medium',
          formFieldInput: 'border border-gray-300 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent',
        },
        layout: {
          socialButtonsVariant: 'iconButton',
          socialButtonsPlacement: 'bottom',
        }
      };

      export default function RootLayout({
        children,
      }: {
        children: React.ReactNode;
      }) {
        return (
          <ClerkProvider appearance={clerkAppearance}>
            <html lang="ja">
              <body>{children}</body>
            </html>
          </ClerkProvider>
        );
      }
      ```

      ## 高度な機能

      ### Organization（組織）機能

      Clerkの組織機能を実装するには、関連コンポーネントを追加します：

      ```tsx
      // components/OrganizationSwitcher.tsx
      import { OrganizationSwitcher } from '@clerk/nextjs';

      export default function OrgSwitcher() {
        return (
          <OrganizationSwitcher
            appearance={{
              elements: {
                organizationSwitcherTrigger: 'py-2 px-4 text-sm text-gray-700'
              }
            }}
          />
        );
      }
      ```

      組織の作成ページ：

      ```tsx
      // app/organizations/new/page.tsx
      import { CreateOrganization } from '@clerk/nextjs';

      export default function NewOrganizationPage() {
        return (
          <div className="flex justify-center items-center min-h-screen">
            <CreateOrganization
              appearance={{
                elements: {
                  formButtonPrimary: 'bg-blue-500 hover:bg-blue-600 text-white'
                }
              }}
            />
          </div>
        );
      }
      ```

      ### OAuth認証

      OAuthプロバイダーを設定するには、Clerk Dashboardでソーシャルコネクションを有効にします。特別な実装は必要なく、SignInコンポーネントに自動的に表示されます。

      ### 多要素認証

      多要素認証もClerk Dashboardで設定でき、特別な実装は必要ありません。

      ## トラブルシューティング

      **問題**: ミドルウェアが正しく動作せず、保護されたルートにアクセスできる  
      **解決策**: `middleware.ts`が正しい場所にあることを確認し、`config`オブジェクトの`matcher`が適切に設定されていることを確認

      **問題**: 認証後にリダイレクトが正しく動作しない  
      **解決策**: 環境変数`NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL`と`NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL`が正しく設定されているか確認

      **問題**: サーバーコンポーネントで`auth()`がエラーを返す  
      **解決策**: `middleware.ts`が正しく設定されていることを確認。また、`clerkMiddleware()`が適切に設定されているか確認

      **問題**: カスタムデザインが適用されない  
      **解決策**: `appearance`オブジェクトの構造を確認し、適切なCSSクラスが指定されているか確認

      ## 参考リソース

      - [Clerk 公式ドキュメント](https://clerk.com/docs)
      - [Next.js App Router Demo](https://github.com/clerk/clerk-nextjs-demo-app-router)
      - [Clerk Dashboard](https://dashboard.clerk.com/)

      copy
      まとめ：AIが「行動」する時代へ
      この動画を見て感じたのは、AIが単なる「知識提供者」から、私たちの代わりに「実際に行動してくれるエージェント」へと進化している、ということです。

      旅行の計画から予約の電話、クリエイティブなコンテンツ制作、専門的な分析や資料作成まで、Gensparkスーパーエージェントは、私たちの働き方や日常を大きく変える可能性を秘めています。

      ぜひ、その驚きの性能を体験してみてください！
  - link:
    text: |
      title: お客さまの安全・安心を目指した「非接触型ディスプレイ案内ＡＩ」の試行設置について
      body:
      １．概要
      （１）実施期間：２０２０年１２月１日（火）～２０２１年１月３１日（日）
      ※基本稼働時間：初電～終電
      （一部駅では、稼働時間を短くする場合があります。）
      （２）実施箇所：品川駅、新宿駅、池袋駅、高輪ゲートウェイ駅、海浜幕張駅、空港第２ビル駅
      合計６駅 ２０か所・３０台
      （３）参加企業：メーカー等７社、JR東日本グループ５社 合計１２社
      ※詳細は別紙をご参照ください。
      本実証実験は、ＪＲ東日本単独では解決が難しい社会の課題や次代の公共交通のあり方について、オー
      プンイノベーションによりモビリティ変革を実現する場として、２０１７年９月５日に設立された「モビリティ変革
      コンソーシアム」の実証実験のひとつです。







      ○ＪＲ東日本グループは、駅においてお客さまからのさまざまなご質問にお答えできるスマートな案内ＡＩ
      システムの導入を目的に「案内 AI みんなで育てようプロジェクト」を２０１８年より開始し、２０２０年３月
      １４日に開業した高輪ゲートウェイ駅にて、同システムの試行導入を実施しました。
      ○従来の案内ＡＩは、お客さまが画面に触れる接触型のタッチディスプレイでしたが、このたび「非接触型
      ディスプレイ案内ＡＩ」を駅に試行設置し、お客さまの操作性や親和性の検証を行います。
      ○また、高輪ゲートウェイ駅では、案内ＡＩシステムを有人改札カウンターに設置し、一部改札業務を案
      内ＡＩと駅係員が連携して対応する実証実験を行います。
      ２．非接触型ディスプレイ案内ＡＩについて
      お客さまに安心して案内ＡＩ端末をご利用いただくため、従来の接触型のタッチディスプレイ案内ＡＩを改良し、
      非接触で操作ができるようにしました。
      今回は、センサー式非接触型ディスプレイとカメラ式非接触型ディスプレイの２つの方式の端末を試行設置
      します。
      （１） センサー式非接触型ディスプレイ
      （凸版印刷株式会社：本社 東京都千代田区、代表取締役社長 麿秀晴）
      （２） カメラ式非接触型ディスプレイ
      （株式会社ティファナ・ドットコム：本社 東京都目黒区、代表取締役社長 藤井亮）

      ※上記に加え、株式会社Nextreamerの対話型案内AIサイネージを試行設置します。

      画面に手を近づけることにより、カメラが認識しカーソルが出現します。そのまま指を動かすだけで、画
      面に触れずに操作が可能です。
      また、サイネージの前に立つと、体表面温度を測定することが可能です。
      従来のタッチパネルの感応センサーを画面から浮かせるようにし、画面に触らなくても操作ができます。
      ３．一部改札業務の遠隔案内実証実験（１２月中旬開始予定）
      高輪ゲートウェイ駅有人改札に非接触型ディスプレイ案内ＡＩを設置し、案内ＡＩによるお客さま案内と駅係員
      による遠隔案内の実証実験を行います。
      ① よく改札で尋ねられる質問などは案内ＡＩがお答えします。
      ② 案内ＡＩが答えられない質問は、駅係員が駅事務室より遠隔によりお答えします。
      ③ 精算など遠隔での対応が難しい業務は、従来どおり駅係員が改札にて行います。
      ④ お手伝い等が必要なお客さまの対応は、従来どおり駅係員等が行います。
      （高輪ゲートウェイ駅有人改札設置 案内AI、リモート接客画面イメージ）
      【駅係員を呼ぶボタンが押されたとき】
      【映像・音声】
      【お客さま】
      【駅事務室側が呼び出されたときの通知手段】
      【映像・音声・画像】
      【通話要求】
      【通話開始】
      【駅事務室側の画面イメージ】
      ４．試行設置箇所と参加企業
      下記の駅にて試行設置を行います。
      ※株式会社ヴァル研究所、インクリメントP株式会社、株式会社リクルートライフスタイル、成田国際空港株
      式会社は、各駅の外部情報サービス提供としての参加企業となります。
      ※今回ご案内している案内ＡＩシステムは現在のイメージであり、変更になる場合があります。
      （参考：これまでの実証実験との比較）
      ２０１８年度 ２０１９年度 ２０２０年度
      実施期間 ２０１８年１２月７日
      ～２０１９年３月１５日
      ２０１９年８月５日
      ～２０１９年１１月１０日
      ２０２０年１２月１日
      ～２０２１年１月３１日
      実施箇所
      ６駅（東京駅、浜松町駅、品川
      駅、新宿駅、池袋駅、上野駅）
      ２２か所・２８台
      ８駅（東京駅、浜松町駅、品川
      駅、新宿駅、池袋駅、上野駅、
      横浜駅、羽田空港国際線ビル
      駅※） ３０か所・３５台
      ※東京モノレールの駅
      ６駅（品川駅、新宿駅、池袋駅、
      高輪ゲートウェイ駅、海浜幕張
      駅、空港第２ビル駅）
      ２０か所・３０台
      参加
      ＡＩ
      メーカー
      １８社（他、ＪＲ東日本情報シス
      テム）
      ※チャットボット会社３社を含む
      １４社（他、ＪＲ東日本情報システ
      ム）
      ３社
      デバイス
      ＡＩロボット：５社
      ＡＩデジタルサイネージ：６社
      （他、ＪＲ東日本情報システム）
      ＡＩチャットボット：３社
      ＡＩロボット：３社
      ＡＩデジタルサイネージ：６社
      （他、ＪＲ東日本情報システム）
      ＡＩデジタルサイネージ：３社
      多言語化
      ４か国語以上：４社（チャットボ
      ット含む）
      （他、ＪＲ東日本情報システム）
      ※日・英・中・韓 等
      ３か国語：２社
      ２か国語：５社
      日本語のみ：３社
      ４か国語以上：８社（他、ＪＲ東日
      本情報システム）
      ※日・英・中・韓 等
      実証実験開始時は３か国語対
      応：１社
      ※準備でき次第、４か国語対応
      予定
      ４か国語対応：３社
      外部情報
      サービス
      ㈱ヴァル研究所（駅すぱあとＷ
      ｅｂサービス）
      ※利用についてはメーカー判
      断
      ㈱ヴァル研究所（駅すぱあとＷｅ
      ｂサービス）
      インクリメントP㈱（ＭａｐＦａｎ）
      ㈱リクルートライフスタイル（ホッ
      トペッパーグルメ）
      ※利用についてはメーカー判断
      ㈱ヴァル研究所（駅すぱあとＷｅ
      ｂサービス）
      インクリメントＰ㈱（ＭａｐＦａｎ）
      ㈱リクルートライフスタイル（ホッ
      トペッパーグルメ）
      成田国際空港株式会社（フライト
      情報等）
      ※利用についてはメーカー判断
      案内端末
      接触型ディスプレイ案内AI
      対話型案内AI
      チャットボット
      接触型ディスプレイ案内AI
      対話型案内AI
      非接触型ディスプレイ案内AI
      対話型案内AI
      ※共同参加のメーカーが複数あるため、各項目のメーカー数の合計が参加メーカー数と一致しません。
      各駅等に配置する案内ＡＩシステム
      １．Ｂｏｔｆｒｉｅｎｄｓ Ｖｉｓｉｏｎ（小石川 彩）
      【新宿駅】【高輪ゲートウェイ駅】
      凸版印刷株式会社 設置台数 ①新宿駅：５か所・５台 ②高輪ゲートウェイ駅：３か所・５台
      ※高輪ゲートウェイ駅は有人改札設置２台を含みます。
      〇「欲しい情報」を話しかけるだけで「その人に最適な情
      報」を提供してくれるコンシェルジュのような多言語デジ
      タルアシスタントです。（日・英・中・韓）
      〇駅をご利用になるさまざまなお客さまに配慮したユニ
      バーサルデザインを実現します。
      〇新型コロナウイルス対策として画面に触れることなく
      操作が可能な非接触「CleanTouch」を搭載し、画面枠内
      の赤外線センサーでタッチやピンチ等、中空操作に対
      応します。
      〇AI による自動応答だけではなく、リアルタイムの有人
      による遠隔対話を組み合わせた案内が可能です。
      (高輪ゲートウェイ駅有人改札)

      ２．ＡＩさくらさん
      【品川駅】【海浜幕張駅】【空港第２ビル駅】
      株式会社ティファナ・ドットコム 設置台数 ①品川駅：２か所・４台 ②海浜幕張駅：４か所・５台
      ③空港第２ビル駅：２か所４台

      〇AI さくらさんが駅員に代わってお客さまをご案内いた
      します。（日・英・中・韓）
      〇駅構内の地図や乗り換え情報はもちろん、観光スポ
      ットやおすすめのお土産など、話しかけるだけでAIさくら
      さんが案内してくれます。
      〇今回の実証実験では新型コロナウイルス対策として、
      非接触機能と自動検温機能が新たに搭載されました。

      ３．ＡＩ案内サイネージ
      【池袋駅】
      株式会社Ｎｅｘｔｒｅｍｅｒ（ネクストリーマー） 設置台数 ①池袋駅：４か所・７台
      〇自社開発の対話型 AI エンジンを搭載したデジタル案
      内所サービスです。本サービスでは、駅構内・駅周辺の
      施設情報や目的地までのアクセスなど、手軽に最適な
      情報をご案内いたします。（日・英・中・韓）
      〇今回は、従来の音声対話プラットフォームをベースと
      し、乗換案内、駅ビル・エキナカ情報、駅周辺地図情
      報、駅周辺飲食店情報などの取得に加え、遅延情報の
      追加や QR コードによる案内情報の持ち運びなど、前回
      の実証実験で得た知見を踏まえアップグレードいたしま
      した。
      ※株式会社ＮｅｘｔｒｅｍｅｒはＡＩシステムを提供し、筐体は凸版印刷株式会社製のものを使用します。
      ※今回ご案内している案内ＡＩシステムは現在のイメージであり、変更になる場合があります。
