start	end	text
0	2000	はいどうもこころかんびです
2000	4000	当然です
4000	6000	今週も一週間振り返っていきたいと思います
6000	8000	はいはい
8000	10000	今週といえば台風2号エグかったですね
10000	12000	エグかったですね
12000	14000	はい台風2号というか
14000	16000	それに伴う洗浄香水体も含めて
16000	18000	っていう感じですけど
18000	20000	そうですね
20000	22000	お宅は逆流しなかったですか
22000	24000	トイレとか
24000	26000	うちは大丈夫でしたけどね
26000	28000	はいまあでも
28000	30000	いろんなところの川が
30000	32000	危険水域になっているところもあれば
32000	34000	氾濫しちゃったところもあって
34000	36000	だいぶだいぶ被害も出ていて
36000	38000	ちょっと大変ですね
38000	40000	というところですね
40000	42000	そうですね
42000	44000	全国的に大雨警報が出なかった地域は
44000	46000	ほぼなくて
46000	48000	河川地域の人はもう避難指示が
48000	50000	片っ端から出ていた認識ですね
50000	52000	そうですね
52000	54000	比較的日本海側は
54000	56000	まだマシだった
56000	58000	海平洋側は特に
58000	60000	東海道新幹線通っている経路
60000	62000	ら辺は
62000	64000	かなり長い間
64000	66000	降られてしまったので
66000	68000	川という川が全部
68000	70000	危険水域まで上がっている感じがありましたね
70000	72000	そうですね
72000	74000	特に関東の方だと
74000	76000	あれですよね
76000	78000	埋め立てたとかもともと平野だった
78000	80000	関係とかもあって
80000	82000	結構
82000	84000	川が
84000	86000	溢れると
86000	88000	一気に流れ込んじゃうくらい
88000	90000	地面が低い
90000	92000	土地が低いところもあって
92000	94000	それもあって
94000	96000	かなり
96000	98000	ちょっと注意してみないな
98000	100000	行けないなという感じのところが
100000	102000	多かったですけど
102000	104000	それを言うと大阪市だって結構
104000	106000	埋め立てているので
106000	108000	人のこと言えないですよ
108000	110000	あっちもやばいと思う
110000	112000	感じもありますけど
112000	114000	はい
114000	116000	そこら辺を含めて
116000	118000	今日紹介するサイトなんですけども
118000	120000	なんと国が作った
120000	122000	国土交通省が
122000	124000	作っている川の防災情報
124000	126000	というサイト
126000	128000	これが結構よかったので紹介ですと
128000	130000	国なのに
130000	132000	国なのにって言うと怒られるかもしれないですけど
132000	134000	国なのにって感じですね
134000	136000	アクセスしてもらうと
136000	138000	日本地図が出てきて
138000	140000	そこから自分の
140000	142000	街のところばーっと近づいていくと
142000	144000	川一覧で
146000	148000	全部の川
148000	150000	の情報が
150000	152000	地図上に
152000	154000	載っていて
154000	156000	その情報も
156000	158000	観測所で観測している
158000	160000	水位の情報とか
160000	162000	川の量
162000	164000	水位量を
164000	166000	監視するための
166000	168000	監視カメラの映像とか
168000	170000	川に沿って全部ありますよ
170000	172000	というのが
172000	174000	見れます
174000	176000	首都角とかに行っても
176000	178000	見れるんですけど
178000	180000	そこで見れるのは首都角の情報だけだったりするので
180000	182000	広範囲に
182000	184000	見たいとき
184000	186000	会社行って会社から帰ってくるとき
186000	188000	途中とか
188000	190000	そういうところも全部
190000	192000	一目同士で見れるので
192000	194000	そこがまず便利ですね
194000	196000	というところ
196000	198000	もう一つ便利なのが
198000	200000	結構情報が詳しくて
200000	202000	例えば
202000	204000	観測所水位観測情報
204000	206000	というところをクリックしてもらうと
206000	208000	横断図みたいなのが出て
208000	210000	今の川の水位がここですよ
210000	212000	危険水位ここですよ
212000	214000	溢れるところになると
214000	216000	ここまで溢れちゃいますよ
216000	218000	ここ以上になると溢れますよ
218000	220000	みたいな情報が
220000	222000	グラフと観測地と横断図
222000	224000	という図
224000	226000	で分かりやすく見れることができる
226000	228000	これだけでも
228000	230000	波の
230000	232000	下手な仕様とかよりも
232000	234000	情報がまとまっているなと
234000	236000	いうところが
236000	238000	見て取れるかなというところ
238000	240000	さらに
240000	242000	自分の登録情報とか
242000	244000	何なら浸水想定とか
244000	246000	マップに重ねて
246000	248000	見ることができるので
248000	250000	避難するときにも
250000	252000	見ていると結構有用なのかなと
252000	254000	いうところが
254000	256000	結構便利だなというところでの
256000	258000	紹介です
258000	260000	いやーこれめちゃくちゃ
260000	262000	いいですね
262000	264000	国土交通省が取りまとめて
264000	266000	やってたんだっていう
266000	268000	認識ですねどっちかというと
268000	270000	NOSとかでは結構
270000	272000	地域ごとの
272000	274000	市役所とかの企画で
274000	276000	こういう川の水位を
276000	278000	測定する設備を導入しましたとか
278000	280000	そういうニュースは見てたんですけど
280000	282000	国発信でやってるのを全然知らなかったですね
282000	284000	そうですね
284000	286000	やっぱり何て言うんですか
286000	288000	多分
288000	290000	市とかの情報を
294000	296000	市とかの情報を
296000	298000	多分国土交通省が
298000	300000	集めてるとは思うんですけど
300000	302000	はい
302000	304000	くしゃみが出そうで出なかった
304000	306000	それを一覧表示して
306000	308000	くれているのはかなり
308000	310000	頑張ってるなという印象です
310000	312000	市によって情報の流度とかも
312000	314000	全然バラバラでしょうね
316000	318000	取れてるデータと
318000	320000	測定間隔
320000	322000	測定間隔は全部バラバラなのか
322000	324000	すごいな要をまとめてるな
326000	328000	今いくつか見てるんですけど
328000	330000	測定ポイントによっては
330000	332000	10分間隔だったり1日単位だったりとか
332000	334000	すごくまちまちですね
334000	336000	まあそれでも
336000	338000	一論性があることでね
338000	340000	上流がやばくなったら
340000	342000	ここまでやばいんだなみたいなのが
342000	344000	見て取れますし
344000	346000	そうですね
348000	350000	避難指示に対しても
350000	352000	もちろん川のそばの人は
352000	354000	急いで避難した方がいいんですけど
354000	356000	川からこれくらい離れているけど
356000	358000	結局この川は気にした方がいいのか
358000	360000	この避難指示は
360000	362000	どこまで妥当なのか
362000	364000	どこまで妥当なのか
364000	366000	っていうのがやっぱり
366000	368000	判断つきにくいっていうのは正直あると思うんですけど
368000	370000	そうですね
370000	372000	これで自分の一応最寄りの水位とか
372000	374000	実際に見れたり
374000	376000	カメラ映像をリモートで見れたら
376000	378000	これはやべえって動けるでしょう
378000	380000	だからいいですね
380000	382000	あと
382000	384000	どっちの川が溢れそうになっているか
384000	386000	っていうのを見て
386000	388000	遠い川に避難したりとかもできるでしょうし
388000	390000	そうだね
390000	392000	川と川の間に挟まれている地域とかも結構あるので
392000	394000	結構多いんでね
396000	398000	そこら辺も含めて
400000	402000	南下の檻には
402000	404000	参照していただけると結構いいのかなと
404000	406000	思いました
406000	408000	ところでの紹介でした
408000	410000	ありがとうございます
412000	414000	次連続した私の方から
414000	416000	なんですけども
416000	418000	1点目で
418000	420000	高級チェアという
420000	422000	椅子の紹介です
422000	424000	これハーマンミラーさんが
424000	426000	出していて
426000	428000	ハーマンミラー
428000	430000	アーロンチェアで有名な
430000	432000	ハーマンミラーさんですね
432000	434000	高級チェアやってたんですよね
434000	436000	やってたというか
436000	438000	今回コラボレーションで出したみたいな感じ
438000	440000	らしいですね
442000	444000	これロジクルグループとの
444000	446000	コラボレーションで
446000	448000	キーボードとかマウスとか
448000	450000	ロジクル信者の私としては
450000	452000	ぜひとも座ってこないといけないかなと思い
452000	454000	店舗にいて
454000	456000	座ってきましたという感じです
458000	460000	そうですね
460000	462000	まずいいところから言うと
462000	464000	何よりも良かったところとして
464000	466000	ヘッドレストがめちゃくちゃ高いところまで
466000	468000	上がるという
468000	470000	ところですね
472000	474000	私結構身長が高くて
474000	476000	並大抵の椅子だと
476000	478000	ヘッドレストが
478000	480000	頭の位置まで来なくてちょっと
480000	482000	なくていいかなというレベルだったんですけども
482000	484000	こいつはなんと
484000	486000	私の頭のてっぺんの上まで
486000	488000	いく
488000	490000	それは伸びすぎる
490000	492000	ここまで伸びるんかい
492000	494000	という感じでした
494000	496000	それはすごい
496000	498000	2メートルぐらいの身長の人でも
498000	500000	普通に座れると思いますと
500000	502000	素晴らしい
502000	504000	そうですね
504000	506000	あともう一個
506000	508000	言うところとしては
508000	510000	ハーマンミラーらしく
510000	512000	色んな調整するスポット
512000	514000	があると
514000	516000	例えば腰の
516000	518000	ランバーサポート
518000	520000	アームの高さ幅奥行き
520000	522000	腕を乗せるアームですね
522000	524000	座面の高さ調整
524000	526000	背もたれる
526000	528000	深さの角度調整
528000	530000	リクライニングの硬さ調整
530000	532000	座面の奥行き
532000	534000	ヘッドレストの高さ調整
534000	536000	ヘッドレストパッドの回転
536000	538000	欲しいところの
538000	540000	可動部は一通り揃えているかなと
540000	542000	いう感じがあるので
542000	544000	なんていうんですかね
544000	546000	物足りないなと思うこと
546000	548000	あんまりないかなというところ
548000	550000	あと
550000	552000	そうですね
552000	554000	細かいところで言うと
554000	556000	座面の高さ調整
556000	558000	チルトリミッターですね
558000	560000	背もたれの深さが
560000	562000	7段階ぐらい切り替えられる
562000	564000	リクライニングの硬さも
564000	566000	7段階ぐらい切り替えられて
566000	568000	結構細かく切り替えられる割に
568000	570000	お高い椅子に
570000	572000	逆にありがちな
572000	574000	ぐるぐるめっちゃ頑張って回さないといけない
574000	576000	カチカチカチッと回すタイプなので
576000	578000	調整もしやすい
578000	580000	という意味で
580000	582000	そこの機構はかなり好印象でした
584000	586000	こんだけ機能がついて
586000	588000	15万弱
588000	590000	13万円くらいだったかな
590000	592000	機動の前にだいぶ
592000	594000	コスパもいい椅子
594000	596000	というところで
596000	598000	おすすめといえばおすすめかな
598000	600000	というところですね
602000	604000	普通のアーロンが
604000	606000	25万くらいですよね
606000	608000	それの反映で
608000	610000	アーロンとかはヘッドレストもついてないですし
612000	614000	そこら辺に比べるとだいぶ
616000	618000	そういう製品と比べて
618000	620000	どこが
620000	622000	安くなってるポイントなんでしょうね
622000	624000	そうですね
626000	628000	細かいところのグレードが
628000	630000	ちょっと低いかなというところ
630000	632000	はあるかなと思います
632000	634000	例えばちょっと
636000	638000	チルト角とかを調整する
638000	640000	グリップが
640000	642000	タイヤみたいな感じで
642000	644000	黒字に赤なんですけど
644000	646000	ちょっと安っぽい見た目している
650000	652000	あとは
652000	654000	そうですね
654000	656000	アームが結構調整効くとは言いますけど
656000	658000	アーロンチェアみたいに
658000	660000	シータ角が
660000	662000	回転しないとか
666000	668000	アーロンチェアの特徴である
668000	670000	座る座面側のメッシュではない
670000	672000	とかですね
672000	674000	スポンジのタイプ
674000	676000	なので
676000	678000	アーロンチェアの
678000	680000	ケツむれないよっていうのを期待するには
680000	682000	ちょっと足りないかなという感じ
684000	686000	そこら辺
686000	688000	細かい部分で
688000	690000	低価格感はあるとはいえ
690000	692000	フル機能
692000	694000	一通りの機能をサポートしている
694000	696000	というところでは
696000	698000	好みに合えば
698000	700000	全然
700000	702000	これで大満足する人も多いだろうな
702000	704000	という感じですね
708000	710000	基本的には
710000	712000	めっちゃいいなと思ってますけど
712000	714000	これどの辺が
714000	716000	ゲーミングなんですか
716000	718000	えーとですね
718000	720000	見た目
720000	722000	赤と黒っていう基調
722000	724000	でもさっきロジクールって言ってましたけど
724000	726000	赤と黒の基調って
726000	728000	どっちかというと
728000	730000	シンクパッドとかそんなイメージだけど
730000	732000	まあ確かにねという感じですけど
732000	734000	まあ
734000	736000	そういう意味では普通に
736000	738000	オフィスチェアとしても使えるよというか
738000	740000	構造的には
740000	742000	ゲーミングチェアというオフィスチェアなので
742000	744000	そうですよね
744000	746000	ハーマンミラーさん
746000	748000	もう一種類
748000	750000	ハーマンミラーロジクールコラボの
750000	752000	エンボディゲーミングチェア
752000	754000	はいはい
754000	756000	こっちはめちゃくちゃゲーミング感あふれる
756000	758000	見た目してるんですけど
758000	760000	いやどちらかというと
760000	762000	これは元からあるタイプですね
762000	764000	あそうなんですか
764000	766000	エンボディは元から
766000	768000	背骨に
768000	770000	全部合うみたいな感じで売ってて
770000	772000	それを
772000	774000	ゲーミングカスタムした
774000	776000	どこはゲーミングカスタム
776000	778000	ちょっと忘れちゃいましたけど
778000	780000	ゲーミングのロゴが入ってますね
780000	782000	あとカラーリングが
782000	784000	あれとかかなという感じ
784000	786000	なるほど
786000	788000	今回の最初から
788000	790000	ゲーミングチェアとして設計されたもの
790000	792000	そうですね
792000	794000	そういう意味で逆に
794000	796000	ハーマンミラーさん今までヘッドレストつけないつけない
796000	798000	って言ってたのにつけてきたんで
798000	800000	そういう意味で
800000	802000	ハーマンミラーのメインストリームには
802000	804000	逆に置けないのかもしれない
804000	806000	なるほどね
806000	808000	そうか
810000	812000	だからゲーミング
812000	814000	する上だと
814000	816000	頭の位置が
816000	818000	ずれて
818000	820000	感覚が変わること自体が問題だから
820000	822000	ヘッドレストが必要だけど
822000	824000	実際のデスクワークでは
824000	826000	そんなガチっと固定してたら
826000	828000	体に良くないから
828000	830000	あんまりヘッドレストとか望ましくないとか
830000	832000	そういう話なんですかね
832000	834000	多分そうだと思いますね
834000	836000	ゲームを10時間もやるようなやつは
836000	838000	首の骨痛めるから
838000	840000	ヘッドレストつけてやろうかという
840000	842000	話なんじゃないでしょうか
842000	844000	なるほどね
846000	848000	普通に素直に
848000	850000	ゲーミングとか関係なく
850000	852000	良い椅子だと思いますね
852000	854000	そうですね
854000	856000	オフィスチェアというか
856000	858000	ワーキングチェアとして
858000	860000	関数が高いと思うので
862000	864000	全然これは買いだと思います
864000	866000	いつ買うんですか
868000	870000	ちょっと悩み中
870000	872000	言わなかったんですけど
876000	878000	肩の上の部分が
878000	880000	ちょっと当たったなっていうのが
880000	882000	ちょっと心残り
882000	884000	なるほどね
884000	886000	背もったれの形が結構
886000	888000	R描いてて角度ついちゃってるから
888000	890000	肩幅が合わないときついのか
890000	892000	肩幅というか背中の長さ
894000	896000	背中の長さ
896000	898000	このタイプで
898000	900000	それなりにやわめなんですよね
900000	902000	背もたれが
902000	904000	フレームにちょっと
904000	906000	寄りかかっちゃうと
906000	908000	フレーム感が出てきてるんで
908000	910000	それが長時間使って
910000	912000	背もたれグイってやると
912000	914000	ちょっと気になるかなーって
914000	916000	ちょっと思ったり思わなかったり
916000	918000	みたいな感じは
918000	920000	ちょっと心残りでした
920000	922000	のでちょっと迷って
922000	924000	もしかしたら
924000	926000	悩むな
926000	928000	もしかしたら岡村のどようのやつを
928000	930000	買うかもしれないけど
932000	934000	って感じでちょっと悩んでますね
936000	938000	普通の人は全然
938000	940000	気にならない領域だと思うので
942000	944000	普通におすすめです
944000	946000	このクオリティで
946000	948000	13万円安いと思いますし
950000	952000	ぜひどうでしょうかという紹介でした
952000	954000	いいですねまた
954000	956000	椅子沼に回る人が増えるといいですね
956000	958000	いいですね
960000	962000	以上です
962000	964000	じゃあ次いきたいと思います
966000	968000	2点目
968000	970000	NVIDIAとマイクロソフトが連携
970000	972000	Azureユーザーは
972000	974000	NVIDIAのAIのフレームワークと
974000	976000	ツールの利用が
976000	978000	簡単にということで
978000	980000	ロボスターさんの記事です
980000	982000	NVIDIAは
982000	984000	2023年5月23日
984000	986000	マイクロソフトのAzureマシンラーニングに
986000	988000	NVIDIA AIエンタープライズソフトウェアを
988000	990000	組み込みエンタープライズが
990000	992000	AIイニシアチブを加速するのを支援すると
992000	994000	発表した
994000	996000	この投稿により設計がないエンタープライズ向け
996000	998000	プラットフォームが構築され
998000	1000000	全世界のAzureカスタマーは
1000000	1002000	NVIDIA AIプラットフォームの
1002000	1004000	NVIDIA AIエンタープライズが
1004000	1006000	完全対応している
1006000	1008000	100を超えるNVIDIA AIフレームワークと
1008000	1010000	ツールを使って
1010000	1012000	カスタマイズされたアプリケーションを素早く構築
1012000	1014000	展開及び管理できるようになる
1014000	1016000	横文字が多すぎて意味が分からないと思いますけど
1016000	1018000	平たく言えば
1018000	1020000	Azureクラウドを使った方が
1020000	1022000	最先端の
1022000	1024000	AI開発できるよっていう話です
1026000	1028000	わざわざなんでこれを取り上げたかというと
1028000	1030000	先日
1030000	1032000	マイクロソフトビルドのイベントで
1032000	1034000	AIにガンブリしてるって話は
1034000	1036000	したと思うんですが
1036000	1038000	それをさらに
1038000	1040000	超えるニュースですね
1040000	1042000	NVIDIAは現状
1042000	1044000	すごくAIに
1044000	1046000	振り始めていて
1046000	1048000	かつそれもオープンでやろうという
1048000	1050000	方針でやってます
1050000	1052000	NVIDIAにしてみれば
1052000	1054000	AIの進化と
1054000	1056000	加速によってNVIDIA製品が
1056000	1058000	多く使われることによって
1058000	1060000	NVIDIAが儲かるので
1060000	1062000	AI技術自体がオープンになって
1062000	1064000	加速することは大賛成
1064000	1066000	大歓迎です
1066000	1068000	Azureは現状
1068000	1070000	AWSの
1070000	1072000	2番手としてクラウドを
1072000	1074000	持ってますけれども
1074000	1076000	残念ながら
1076000	1078000	AWSに一歩
1078000	1080000	遅れ続けているというところがあって
1080000	1082000	クラウドを始める人はまず
1082000	1084000	AWSを検討してやっぱりちょっと
1084000	1086000	自社の
1086000	1088000	マイクロソフトサービスとの関係で
1088000	1090000	AzureかなとかWindowsの方が
1090000	1092000	慣れてるからAzureかなということで
1092000	1094000	2番目に
1094000	1096000	ちょっと別の理由があって
1096000	1098000	Azureにするみたいなことも
1098000	1100000	多くあってですね
1100000	1102000	なかなかクラウドといえば
1102000	1104000	Azureと言われる世界には
1104000	1106000	至ってなかったという
1106000	1108000	ところだったんですが
1108000	1110000	この提携によって
1110000	1112000	AIやりたかったら
1112000	1114000	Azureという話になりますと
1114000	1116000	先日オープンAIの
1116000	1118000	サービスもAzureに導入されてきた
1118000	1120000	ってことがあるので今これだけ
1120000	1122000	盛り上がっているAI関係をやりたかったら
1122000	1124000	正直Azure一択
1124000	1126000	という感じになりつつあります
1126000	1128000	このポジションは
1128000	1130000	実は元々Google
1130000	1132000	クラウドプラットフォームGCPが
1132000	1134000	そのポジションにいて
1134000	1136000	クラウドというのが立ち上がり始めた
1136000	1138000	例名機AWS
1138000	1140000	Azure GCPの3つがあって
1140000	1142000	AWSは仮想サーバー
1142000	1144000	Azureはマイクロソフトツール連携
1144000	1146000	GCPは
1146000	1148000	機械学習 AIみたいな
1148000	1150000	ところの住み分けだねっていう
1150000	1152000	世界だったんですけれども
1152000	1154000	今回のこのニュースを受けて
1154000	1156000	圧倒的にAzureが
1156000	1158000	AI関係では出し抜いた状態になりました
1160000	1162000	どこまで出し抜いているかというと
1162000	1164000	NVIDIAは
1164000	1166000	マイクロソフト
1166000	1168000	Azureが提供する
1168000	1170000	仮想環境の内部のコンピューティング
1170000	1172000	プリセットに
1172000	1174000	NVIDIAが持っている
1174000	1176000	スーパーコンピュータ的な
1176000	1178000	アーキテクチャ
1178000	1180000	も導入すると言っているので
1182000	1184000	他のAWSとかで
1184000	1186000	AIをやるのに比べて
1186000	1188000	はるかに高速で
1188000	1190000	高効率に低コストな
1190000	1192000	開発ができるので
1192000	1194000	同じような開発をするんだったら
1194000	1196000	AWSとAzureで
1196000	1198000	Azureを選んだ方が
1198000	1200000	5倍くらい
1200000	1202000	早く開発スピードが上がってしまう
1202000	1204000	という現実が出てきそうな
1204000	1206000	ニュースです
1208000	1210000	戦国時代感
1210000	1212000	ここに極まれるという感じが
1212000	1214000	すごいですけど
1218000	1220000	これに他のGAFAは
1220000	1222000	どう対抗するんですかねという感じが
1222000	1224000	正直ちょっと思うんですけど
1224000	1226000	どうなんだろう
1226000	1228000	ここまでやられちゃうと
1228000	1230000	厳しいんじゃないかな
1230000	1232000	結構厳しい
1232000	1234000	正直厳しいと思います
1234000	1236000	マイクロソフトは
1236000	1238000	オープンAIと提携しているけれども
1238000	1240000	別にマイクロソフト自身が
1240000	1242000	コンピューティングサービスを持っているわけではないから
1242000	1244000	マイクロソフトとしては
1244000	1246000	オープンAIみたいな
1246000	1248000	ものを開発した
1248000	1250000	サービス
1250000	1252000	出来上がったものを提供しますようまでしか
1252000	1254000	GCPとしては強みが発揮できていかなかったのが
1254000	1256000	その大元も
1256000	1258000	提供できるようになったというので
1258000	1260000	今まで苦手だった分野は
1260000	1262000	克服できる余地があるという状態になりました
1262000	1264000	対抗を
1264000	1266000	するために
1266000	1268000	GCPが古くからやっている手法を
1268000	1270000	そのまま言うと
1270000	1272000	Googleとしては
1272000	1274000	独自にAIの開発を進めていて
1274000	1276000	Googleホームとか
1276000	1278000	AIスピーカー関係で
1278000	1280000	既に実現している通り
1280000	1282000	いろんな機械学習モデルを持っています
1282000	1284000	そういったモデルに
1284000	1286000	最適化された
1286000	1288000	アーキテクチャフレームワークというのは
1288000	1290000	GCP自身が持っているので
1290000	1292000	今後Googleが出す
1292000	1294000	AIの
1294000	1296000	ベースとなっているモデルが
1296000	1298000	Googleのこれまで培ってきた
1298000	1300000	アーキテクチャ向きなもので
1300000	1302000	それがオープンAIと十分
1302000	1304000	戦っていけるようなものであれば
1304000	1306000	まだまだやれる余地は
1306000	1308000	あるんだと思うんですけど
1308000	1310000	ただこれまでGoogleは
1310000	1312000	機械学習系を
1312000	1314000	クローズドにしてきた背景もあって
1314000	1316000	このオープン戦略で
1316000	1318000	一気に
1318000	1320000	巻き返そうとしているNVIDIAや
1320000	1322000	マイクロソフトに対抗するには
1322000	1324000	ちょっとスピードが
1324000	1326000	間に合わないので
1326000	1328000	今からオープンにして
1328000	1330000	どれだけ取り戻せるかという議論になっちゃいますけど
1330000	1332000	まだオープンにするとか
1332000	1334000	そういうニュースもないので
1334000	1336000	GCPはかなり
1336000	1338000	戦を強いられそうかなというところですね
1340000	1342000	AWSはAWSで
1344000	1346000	Azureの後追いじゃないけど
1346000	1348000	世の中にはもっといろんな
1348000	1350000	AIサービスあるよねということを
1350000	1352000	打ち出して
1352000	1354000	そういったAIを
1354000	1356000	開発するプロセスに注目したサービスを
1356000	1358000	出してきていますと
1358000	1360000	政治メーカーというサービスが
1360000	1362000	あるんですけど
1362000	1364000	何が違うかというと
1364000	1366000	モデルを開発する上で
1366000	1368000	元々なるデータがこんなのがあって
1368000	1370000	モデルをワンタン回したら
1370000	1372000	こんな中間データが出てきて
1372000	1374000	それに人間のチェックを入れて
1374000	1376000	まだモデルに取り込み直してみたいな
1376000	1378000	そういう開発プロセスループみたいなのがあるんですけど
1378000	1380000	それを
1380000	1382000	リッチなGUIで
1384000	1386000	順次やっていける
1386000	1388000	そのモデルを解析する瞬間だけ
1390000	1392000	PCをずらーっと並べて
1392000	1394000	皆さん環境を作って
1394000	1396000	その中間ファイルが出た時点で
1396000	1398000	その環境を一気に消してみたいな
1398000	1400000	コンピューティングリソース管理と
1400000	1402000	開発プロセスを
1402000	1404000	一括統合でみますよ
1404000	1406000	みたいなサービスの方に振っていって
1408000	1410000	開発のやりやすさで勝負をかけている
1410000	1412000	という感じかな
1414000	1416000	ちょっとGoogleは置いといて
1416000	1418000	公社の方は
1418000	1420000	何でしょう
1420000	1422000	世界が広がれば広がるほどワンチャンありそうだな
1422000	1424000	という気はするけれど
1434000	1436000	マイクロソフトとエドビディアとオープンAI
1436000	1438000	キングキングキング
1438000	1440000	みたいな感じが
1440000	1442000	強すぎるなと
1442000	1444000	思ってしまうな
1446000	1448000	AWSの今話した戦略って
1448000	1450000	今までやってきた
1450000	1452000	機械学習とかモデル開発の
1452000	1454000	当たり前をサービス化しました
1454000	1456000	って話なんですけど
1456000	1458000	今オープンAIとかでこれだけ劇的に
1458000	1460000	様子が変わってきている中で
1460000	1462000	そのやり方がどこまで通用するのか
1462000	1464000	というのは正直読めなくて
1464000	1466000	新しいモデルを
1466000	1468000	取り扱うにはやはりその時点から
1468000	1470000	このモデルがどういうプロセスで
1470000	1472000	開発されるべきかという議論に
1472000	1474000	毎回ゼロスタートになっていくものだと思うんですよ
1474000	1476000	既にあるプロセスに
1476000	1478000	合わせ込もうとする方が
1478000	1480000	逆に開発速度を遅らせる
1480000	1482000	って可能性もあるので
1482000	1484000	それを考えると
1484000	1486000	やっぱりAzure一興に
1486000	1488000	正直見えちゃうって感じかな
1488000	1490000	そうですね
1494000	1496000	なるほど
1496000	1498000	いやーちょっと本当に
1498000	1500000	パワーバランスが怖いっすね
1500000	1502000	海の向こうはって感じ
1502000	1504000	マイクロソフトなんて
1504000	1506000	もう一時期オワコンまで言われていたのに
1506000	1508000	この持ち返しチップリはすごいですね
1508000	1510000	あるし
1510000	1512000	NVIDIAもだってAMDが
1512000	1514000	数年前は盛り返してきた時は
1514000	1516000	そうそれはやっぱり
1516000	1518000	ちゃうかとか言われていたのに
1518000	1520000	所詮ゲームでしかいけないNVIDIAみたいに
1520000	1522000	言われていたから
1522000	1524000	あとどこにグラボ乗せるんだいとか
1524000	1526000	言われていたのに
1526000	1528000	こうなってしまうとはなという
1528000	1530000	感じがありますからね
1530000	1532000	実際株価
1532000	1534000	ダダダ下がりしましたからね一時期
1534000	1536000	作るゲーム
1536000	1538000	グラフィックボードはハイスペックだけど
1538000	1540000	誰の需要にも応えていないとか言われてね
1540000	1542000	そうですね
1542000	1544000	だって今年収が
1544000	1546000	確か
1546000	1548000	4倍
1548000	1550000	3倍ちょっとくらいにはなってる
1550000	1552000	NVIDIA今検索したら
1552000	1554000	年収が150ドルくらいで
1554000	1556000	今400ドルですからね
1556000	1558000	えぐー
1558000	1560000	2.5倍
1562000	1564000	そんな感じなんで
1564000	1566000	ちょっとね
1566000	1568000	キング同士が
1568000	1570000	オープン戦略で連携しちゃうと
1570000	1572000	ちょっと困る
1572000	1574000	って感じ
1574000	1576000	ですけど
1576000	1578000	逆にキング側からすると
1578000	1580000	そうでもしないと
1580000	1582000	何て言うの
1582000	1584000	OSSに食われるっていう
1584000	1586000	感じなんでしょうねこれは
1586000	1588000	そうなんでしょうね
1588000	1590000	取り込まないとみたいな
1592000	1594000	危機感を持ったのは多分
1594000	1596000	登場した生成AIの
1596000	1598000	使われ方の部分だと思うんですよ
1598000	1600000	はいはい
1600000	1602000	ものすごく
1602000	1604000	クローンされまくって
1604000	1606000	個人が開発した
1606000	1608000	ちょっとした
1608000	1610000	ものだけ変えたモデルだったり
1610000	1612000	とか開発プラットフォームだったり
1612000	1614000	っていうのが
1614000	1616000	無造作に
1616000	1618000	増えまくったというかインターネット
1618000	1620000	例明記のようにポコポコ生まれまくって
1620000	1622000	誰も
1622000	1624000	ディファクトを取る気がないっていう世界が
1624000	1626000	生まれたんですよね
1626000	1628000	ディファクトを取る活動をしている暇があったら
1628000	1630000	新しいものを作った方が早いみたいな
1630000	1632000	早いというかそっちの方が
1632000	1634000	価値があるんですかね
1634000	1636000	っていう世界に
1636000	1638000	対して
1638000	1640000	でかい企業が
1640000	1642000	取りに行くっていう戦略が
1642000	1644000	あまりおいしくないっていう
1644000	1646000	ふうにちゃんと
1646000	1648000	見据えられたのがすごいかなって感じですかね
1648000	1650000	そうですね
1652000	1654000	なので
1654000	1656000	ハードとソフトと
1656000	1658000	あとはなんだ環境を
1658000	1660000	プラットフォームインフラを
1660000	1662000	全部提供しますよ
1662000	1664000	あとは好きに
1664000	1666000	やってください
1666000	1668000	そうですね
1668000	1670000	ということで
1670000	1672000	皆さんの会社の中でも
1672000	1674000	AIの話は
1674000	1676000	ちらほら耳にするでしょうけど
1676000	1678000	Azure一択じゃないですかね
1678000	1680000	って言っておいたらいいと思います
1680000	1682000	はい
1682000	1684000	それがいいと思います
1684000	1686000	というところです
1686000	1688000	以上です
1688000	1690000	では次3点目は私の方から
1690000	1692000	TechBlasterの記事です
1692000	1694000	iSpaceの月面着陸失敗
1694000	1696000	理由はクレーター地形の影響で
1696000	1698000	プログラムが誤作動か
1698000	1700000	というタイトルの記事です
1700000	1702000	ちょっと長いんですけど
1702000	1704000	ずらっと読みます
1704000	1706000	iSpaceは5月26日
1706000	1708000	月面探索プログラムHAKUTO-R
1708000	1710000	ミッション1の結果を報告した
1710000	1712000	同社が開発したランダンは
1712000	1714000	4月26日未明に
1714000	1716000	月周回軌道からの
1716000	1718000	効果を開始
1718000	1720000	順調に進んでいたものの
1720000	1722000	最終段階でコードデータに
1722000	1724000	誤作があり着陸に失敗していた
1724000	1726000	フライトデータを詳細に
1726000	1728000	分析したところ
1728000	1730000	ソフトウェア側の問題だったことが
1730000	1732000	明らかになったという
1732000	1734000	同社のミッション1ランダンは
1734000	1736000	2022年12月11日に
1736000	1738000	打ち上げを実施
1738000	1740000	同3月21日に
1740000	1742000	月周回軌道に到着し
1742000	1744000	成功すれば民間初
1744000	1746000	日本初となる月面着陸に
1746000	1748000	挑んでいた
1748000	1750000	視線制御などは正常に機能し
1750000	1752000	ついにコード計が
1752000	1754000	ゼロを指したものの
1754000	1756000	そこに地面はなく効果が継続
1756000	1758000	最終的には燃料が尽き
1758000	1760000	ランダンは自由落下して
1760000	1762000	月面に撃沈したものとみられる
1762000	1764000	ミッション後
1764000	1766000	同社は失敗原因の調査を開始
1766000	1768000	そこで分かったのが
1768000	1770000	ランダンがコードゼロと認識
1770000	1772000	していたのは実際にはまだ
1772000	1774000	コードが5kmくらいあった
1774000	1776000	ところだということだ
1776000	1778000	なぜこれほど大きな誤作が
1778000	1780000	生えてしまったのか
1780000	1782000	その理由を説明する前に
1782000	1784000	まずはコードについては補足が必要であろう
1784000	1786000	実はここで言うコードには
1786000	1788000	3つの種類がある
1788000	1790000	もちろん実際に
1790000	1792000	ランダンが引っ越したコードは
1792000	1794000	その1つだ
1794000	1796000	ただ月面で誰かが直接観測していた
1796000	1798000	わけではないので
1798000	1800000	この真の値については分からないというのが
1800000	1802000	前提になる
1802000	1804000	本当のコードは分からないものの
1804000	1806000	それではシーケンスの実行時に困ってしまうので
1806000	1808000	ランダンは
1808000	1810000	推定したコードの値を用いる
1810000	1812000	ランダンにはそのための
1812000	1814000	センサーとして
1814000	1816000	感性計測装置
1816000	1818000	IMUが搭載されており
1818000	1820000	高頻度に推定値を
1820000	1822000	更新するのだが
1822000	1824000	時間が経過するほどどうしても誤差が
1824000	1826000	累積して大きくなってしまうという特性がある
1826000	1828000	もう1つが
1828000	1830000	レーザーレンジファインダー
1830000	1832000	LRFで
1832000	1834000	計測したコードだ
1834000	1836000	前述のようにIMUのみによる
1836000	1838000	推定コードをどうしても誤差が
1838000	1840000	累積するが
1840000	1842000	この測定コードでうまく補正してやれば
1842000	1844000	その累積誤差を
1844000	1846000	リセットできる
1846000	1848000	更新頻度はIMUよりは
1848000	1850000	荒くなるものの
1850000	1852000	LRFはレーザーで地表までの
1852000	1854000	距離を直接測定するので
1854000	1856000	誤差の累積のような
1856000	1858000	問題はない
1858000	1860000	今回の着陸では
1860000	1862000	1時35分
1862000	1864000	高度15km付近で
1864000	1866000	最初のLRFの測定が行われ
1866000	1868000	推定コードが修正された
1868000	1870000	この時
1870000	1872000	推定コードと
1872000	1874000	測定コードには3kmほどの
1874000	1876000	差があったが
1876000	1878000	この補正により2つのコードのほぼ中間点が
1878000	1880000	新たな推定コードとなった
1880000	1882000	難しいのは
1882000	1884000	推定コードと測定コードに
1884000	1886000	違いがあった場合に
1886000	1888000	一体どちらがより本当の値に近いのか
1888000	1890000	判断することだ
1890000	1892000	普通に考えれば
1892000	1894000	正しそうだが
1894000	1896000	センサーが故障していたり
1896000	1898000	故障でなくともバイアスが乗っていたりする可能性もある
1898000	1900000	そのために
1900000	1902000	この2つのコードには
1902000	1904000	それぞれ信頼性を示すパラメータがあるという
1904000	1906000	例えば
1906000	1908000	IMUのみで長時間推定していれば
1908000	1910000	信頼度は低下していく
1910000	1912000	一方
1912000	1914000	測定コードは
1914000	1916000	最初の1回目は正しいかどうか怪しいが
1916000	1918000	その後何度も繰り返し
1918000	1920000	測定して
1920000	1922000	理想通りであれば
1922000	1924000	正常に機能している可能性が高いといった具合だ
1924000	1926000	最初の1分くらいは
1926000	1928000	これがまさに理想通りに動作した
1928000	1930000	LRFの
1930000	1932000	測定コードがいくつか届き始めると
1932000	1934000	推定コードがその都度
1934000	1936000	修正され
1936000	1938000	両者の値は収束していった
1938000	1940000	しかし
1940000	1942000	1時37分過ぎ
1942000	1944000	突然測定コードが急激に上昇した
1944000	1946000	これはタイミング的に
1946000	1948000	アトラスクレーターの
1948000	1950000	上空を追加したときだった
1950000	1952000	ランダーは降下を続けていたものの
1952000	1954000	クレーターの段階で
1954000	1956000	地面が急に下に離れたので
1956000	1958000	崖の高さは
1958000	1960000	3kmあると
1960000	1962000	数値的には自分が上昇したように
1962000	1964000	見えたというわけだ
1964000	1966000	ランダーが急に上昇するはずはないし
1966000	1968000	普通の地形であれば
1968000	1970000	こんな急に変化することはない
1970000	1972000	結果として
1972000	1974000	この急激な高度変化を
1974000	1976000	ソフトウェアはセンサーの異常と判断してしまった
1976000	1978000	そのため
1978000	1980000	測定コードによる補正が
1980000	1982000	行われなくなり
1982000	1984000	大きな改良を残したまま
1984000	1986000	降下は最終段階に入り
1986000	1988000	1時43分の推定コードがゼロになった
1988000	1990000	つまりランダーは
1990000	1992000	クレーター外側の高度に地面があると
1992000	1994000	思い込んだまま
1994000	1996000	着陸しようとしてしまったということになる
1996000	1998000	しかし実際には
1998000	2000000	そこにはクレーターの穴があって
2000000	2002000	地面は遥か5kmも下
2002000	2004000	1分くらいは頑張って噴射を続けたものも
2004000	2006000	燃料が尽きて自由落下を開始
2006000	2008000	1時45分
2008000	2010000	地面に激突し
2010000	2012000	通信キャリア電波が喪失した
2012000	2014000	なお高度の測定には
2014000	2016000	LRFのほか電波による
2016000	2018000	レーダーベロシメーターも
2018000	2020000	使う予定だったが
2020000	2022000	これは高度2km以下の近距離で
2022000	2024000	使えるセンサーのことで
2024000	2026000	今回は最後まで測定が
2026000	2028000	開始されることはなかった
2028000	2030000	この点も地面が5kmも
2030000	2032000	下にあったという推測を裏付ける
2032000	2034000	この記事のタイトルでは
2034000	2036000	プログラムが誤作動と書いたものの
2036000	2038000	プログラムとしては
2038000	2040000	作ったとおりに動いたと言える
2040000	2042000	クレーター外偏の状況を通過することは
2042000	2044000	最初から分かっていたことで
2044000	2046000	問題はなぜこのように動くことを
2046000	2048000	事前に把握できなかった
2048000	2050000	ということになるだろう
2050000	2052000	もちろん同社も
2052000	2054000	事前に多数のシミュレーションを
2054000	2056000	行っていた
2056000	2058000	しかしシミュレーション範囲を絞っていたため
2058000	2060000	クレーターの地形による影響が
2060000	2062000	現れなかったのだという
2062000	2064000	シミュレーション範囲は
2064000	2066000	なるべく広くできれば理想であるが
2066000	2068000	広範囲にすればするほど
2068000	2070000	計算時間が長くかかる
2070000	2072000	それだと計算できる
2072000	2074000	係数数が少なくなってしまうので
2074000	2076000	現実的にはうまくバランスを考えて
2076000	2078000	折り合いをつけるしかない
2078000	2080000	同社のCEOは
2080000	2082000	この範囲の検討の仕方が正しくなかったと述べる
2082000	2084000	ミッション後に
2084000	2086000	シミュレーション範囲を広げて
2086000	2088000	再計算したところ
2088000	2090000	実際に起きた現象が再現されたという
2090000	2092000	もし事前にこれをやっていれば
2092000	2094000	今回の失敗は防げたはずだ
2094000	2096000	同社にとっては
2096000	2098000	手痛い経験となってしまったが
2098000	2100000	今後は例えば時間かかっても
2100000	2102000	数ケースは広い範囲で計算するなど
2102000	2104000	検証上の工夫をしていくという
2104000	2106000	ただ失敗したとはいえ
2106000	2108000	今回はソフトウェアの問題
2108000	2110000	それもコードの推定部分のみの問題であって
2110000	2112000	ハードウェア側は
2112000	2114000	ほぼ完璧に動作したというのは
2114000	2116000	ほぼ完璧に機能したというのは
2116000	2118000	次回に向けて非常に大きな成果だったと言える
2118000	2120000	改修作業としては大規模なものではなく
2120000	2122000	2024年に実施する
2122000	2124000	次のミッション2の計画には
2124000	2126000	大きな影響はないだろう
2126000	2128000	今回の失敗の直接的な原因は
2128000	2130000	このように
2130000	2132000	シミュレーション範囲の設定が
2132000	2134000	適切でなかったことだと言えるが
2134000	2136000	背景要因として
2136000	2138000	言及したのが
2138000	2140000	着陸地点の変更である
2140000	2142000	同社は
2142000	2144000	21年2月に
2144000	2146000	詳細設計審査を完了した後に
2146000	2148000	着陸地点を
2148000	2150000	ルーカスソムニウムから
2150000	2152000	アトラスクレーターに
2152000	2154000	変更していた
2154000	2156000	この変更が発表されたのは
2156000	2158000	打ち上げ直前の
2158000	2160000	22年11月17日で
2160000	2162000	実際に変更を決断する時期については
2162000	2164000	公表を避けたが
2164000	2166000	変更後にシミュレーションにかける時間を
2166000	2168000	十分確保できなかったことが
2168000	2170000	今回の失敗につながった
2170000	2172000	これについては
2172000	2174000	CDOもプロジェクト管理上の問題が
2174000	2176000	あったと認める
2176000	2178000	ミッションマンは
2178000	2180000	クレーター内への着陸という
2180000	2182000	かなり特殊なケースだったが
2182000	2184000	もし変更前の場所であれば
2184000	2186000	そんな極端な行動変化は起きない
2186000	2188000	今回のソフトウェアであっても
2188000	2190000	十分着陸に成功していた可能性がある
2192000	2194000	今回の失敗により
2194000	2196000	ペイロードの顧客からの売上が
2196000	2198000	1億円ほど減少するものの
2198000	2200000	業績への影響は軽微だという
2200000	2202000	同社のCDOは
2202000	2204000	ミッションマンの結果をフィードバックし
2204000	2206000	技術の信頼性や成熟度を上げ
2206000	2208000	サービスを提供していきたいと
2208000	2210000	コメントすることになりました
2210000	2212000	ということで
2212000	2214000	なかなかと話してしまいましたけども
2216000	2218000	なかなか不幸な
2218000	2220000	事故でしたねという
2220000	2222000	感じですかね
2222000	2224000	と思っています
2224000	2226000	マシンとしては非常に健全であった
2226000	2228000	通常範囲であれば
2228000	2230000	設計ルーチも正しかった
2234000	2236000	クレーターの縁を
2236000	2238000	運悪く通過するのが
2238000	2240000	効果タイミングだったために
2242000	2244000	推定を誤って
2246000	2248000	危ない側に転んでしまって
2248000	2250000	その結果失敗したという感じですね
2256000	2258000	これを
2258000	2260000	誤作動と言われるのは
2262000	2264000	ソフトウェアエンジニア側からすると
2266000	2268000	納得がいかないなという感じで
2268000	2270000	そういう意味も込めて
2270000	2272000	文中では
2272000	2274000	ソフトウェア誤作動というのは
2274000	2276000	厳密には正しくないと
2276000	2278000	言ってはいるんですけども
2278000	2280000	それやったらタイトル変えて欲しかったな
2280000	2282000	という感じはありますね
2282000	2284000	言い方がないんじゃないんだけど
2286000	2288000	使える
2288000	2290000	センサーと
2292000	2294000	信頼度を獲得するための
2294000	2296000	ロジック自体が
2296000	2298000	そもそもこういう
2298000	2300000	測定欠陥のノイズに弱い
2300000	2302000	というのはおそらく
2302000	2304000	自明だったと思うんですね
2304000	2306000	はい
2308000	2310000	信頼度の作り方的に
2310000	2312000	センサーのノイズは
2312000	2314000	当然ね
2314000	2316000	信頼度を下げる方向にしか働かないので
2316000	2318000	それは多分
2318000	2320000	みんな分かってたと思うんですよ
2320000	2322000	開発者は
2322000	2324000	その上で
2324000	2326000	なんだろうな
2326000	2328000	言うて月面の
2328000	2330000	誤算範囲ってこんなもんだから
2330000	2332000	この範囲のばらつきでテストして問題なければいいでしょう
2332000	2334000	っていう範囲に絞って
2334000	2336000	やってたんだと思うんですよね
2338000	2340000	この結果なんで
2342000	2344000	正直もう
2344000	2346000	多分担当者的には
2346000	2348000	そんな地形を飛ぶこと自体が
2348000	2350000	効果されてないんだけど
2350000	2352000	レベルの状態なんじゃないかろうかって
2352000	2354000	思っちゃいますね
2354000	2356000	そうですね
2356000	2358000	まさにそれはその通りだと思っていて
2358000	2360000	途中で変えてしまったので
2360000	2362000	事前の検証
2362000	2364000	範囲設定は
2364000	2366000	なんというか正しかったと思うんですよ
2368000	2370000	ただ
2370000	2372000	現実問題飛んでしまったところが
2372000	2374000	その検証範囲よりも
2374000	2376000	厳しい条件
2376000	2378000	かつその結果として
2378000	2380000	危険事象が
2380000	2382000	発生してしまった
2382000	2384000	という感じなので
2386000	2388000	なかなかやりきれませんな
2388000	2390000	というところですね
2390000	2392000	やりきれないですね
2394000	2396000	もちろん
2396000	2398000	今回の問題には対処すると思うんですけど
2400000	2402000	今回の学びとして
2402000	2404000	飛ばせるタイミング
2404000	2406000	とか
2406000	2408000	天候とかのいろいろな関係上
2408000	2410000	こういうこと
2410000	2412000	部分を通らざるを得ないっていうのが
2412000	2414000	事前に
2414000	2416000	分かるってことは
2416000	2418000	分かると思うんですよね
2418000	2420000	直前になって分かる
2420000	2422000	そうなった時に
2422000	2424000	じゃあ対処しようと思って
2424000	2426000	時間がないって言われるんだったら
2426000	2428000	事前に月における
2428000	2430000	あらゆるイリーガル
2430000	2432000	フローを見出していって
2432000	2434000	全部シミュレーションにかけるみたいな
2434000	2436000	話になると思うんですけど
2436000	2438000	ソフトウェア
2438000	2440000	開発コストが
2440000	2442000	ベラボーに高くなっちゃうんで
2442000	2444000	難しいなって感じですね
2444000	2446000	というか無理だと思いますね
2448000	2450000	月の表面積
2450000	2452000	全てでシミュレーションしろってのは
2452000	2454000	ちょっと無理なので
2456000	2458000	ある程度ワースト条件
2458000	2460000	絞ってやるしかないですけど
2460000	2462000	ワースト条件って言ってしまうと
2462000	2464000	月の裏側
2464000	2466000	着陸できないか
2466000	2468000	なんですけど
2468000	2470000	めちゃくちゃでかいクレーターとか
2470000	2472000	5キロとか目じゃないと思うので
2472000	2474000	それはそれで
2474000	2476000	マジでもう無理って感じだと思いますし
2480000	2482000	ある程度想定範囲
2482000	2484000	しないといけなかったけど
2484000	2486000	なので最終的に
2486000	2488000	着陸するのはやっぱりプロジェクト上の
2488000	2490000	問題
2490000	2492000	飛行する
2492000	2494000	着陸ポイントを
2494000	2496000	変えた時に
2496000	2498000	問題があるとして
2498000	2500000	拾い上げて
2500000	2502000	もう一回シミュレーションする
2502000	2504000	ということが
2504000	2506000	できなかった
2506000	2508000	っていうのが問題
2508000	2510000	といえば問題かな
2510000	2512000	というとこですよね
2512000	2514000	そうですね
2516000	2518000	エネルギーも限界があるから
2518000	2520000	着陸地点をそこまで
2520000	2522000	いい場所を
2522000	2524000	選び続けられるってことも
2524000	2526000	ないんでしょうから
2526000	2528000	そうですね
2530000	2532000	それはでも
2532000	2534000	本当頭痛いな
2534000	2536000	ソフトウェアエンジニアだけの目線で言ったら
2536000	2538000	もう根本的には
2538000	2540000	センサー数の限界
2540000	2542000	だと思いますって言いたくなる
2542000	2544000	この
2544000	2546000	今搭載しているセンサー
2546000	2548000	でできること
2548000	2550000	の限界に近い話なのでっていう
2550000	2552000	気がするな
2552000	2554000	なので
2554000	2556000	降下シーケンスが始まってから
2556000	2558000	もっと角度の高い
2558000	2560000	センサーが登場するのが
2560000	2562000	2キロ地点で
2562000	2564000	18キロ間は
2564000	2566000	もう
2566000	2568000	2つの方法で見るしかないっていう地点で
2568000	2570000	もう積んでるというか
2570000	2572000	それにはセンサーの誤調も検討しろって言われたら
2572000	2574000	冗長ケース足りねえじゃん
2574000	2576000	っていうのが単純にソフトウェア目線で
2576000	2578000	言いたいことだけど
2578000	2580000	そうですね
2582000	2584000	ハードウェアさんからしたら
2584000	2586000	もうこれ以上乗せられるわけないだろう
2586000	2588000	し
2588000	2590000	むずいっすね
2592000	2594000	なので
2598000	2600000	そうですね
2602000	2604000	敷地設定が
2604000	2606000	できることとしては
2606000	2608000	敷地設定がまずかったかなって感じ
2608000	2610000	はあるかもしれないですけど
2610000	2612000	このクレーターを通ることが
2612000	2614000	決定した時点で
2614000	2616000	最大
2618000	2620000	4キロか5キロぐらい
2620000	2622000	の高低差が
2622000	2624000	発生すると
2624000	2626000	いうことなんで
2626000	2628000	故障した判定を
2628000	2630000	5キロより
2630000	2632000	上にしとくべきだったとか
2632000	2634000	ぐらいかなって感じですね
2636000	2638000	自分がどこにいるか
2640000	2642000	自分がどこにいるかわからないので
2642000	2644000	その
2644000	2646000	時間境での最大
2646000	2648000	発生する
2648000	2650000	測定さまでは
2650000	2652000	大丈夫というか
2652000	2654000	エラーとして判定しない
2654000	2656000	ようにすべきだったかな
2658000	2660000	そうですね
2660000	2662000	あとやれるとしたら
2662000	2664000	LRFの
2664000	2666000	ダブルビーム方式みたいなのが
2666000	2668000	できるのかどうかとかかな
2668000	2670000	2個乗せろってこと
2670000	2672000	レーザー発光源
2672000	2674000	2つにして
2674000	2676000	片方は
2676000	2678000	同じように飛ばすんだけど
2678000	2680000	決まった範囲で確実に返ってくるように
2680000	2682000	反射板に向けて
2682000	2684000	撃つ
2684000	2686000	片方のレーザーは地表まで飛ばすっていう
2692000	2694000	それは
2694000	2696000	どうなん
2696000	2698000	オフセットくらい
2698000	2700000	ドリフトとオフセットくらいは
2700000	2702000	補正しやすくなる
2702000	2704000	まあ
2704000	2706000	それは
2706000	2708000	そうなんだけど
2710000	2712000	オフセットと
2712000	2714000	ドリフトが
2714000	2716000	補正しやすくなったからといって
2716000	2718000	カバレッジが100じゃないからな
2718000	2720000	実速挙側が
2722000	2724000	安全率は
2724000	2726000	安全率は高まるんだけど
2726000	2728000	実速挙側が
2728000	2730000	急に値を変えたときに
2730000	2732000	実速挙側が故障した
2732000	2734000	発光か縦光か分からんけど
2734000	2736000	ならこっちは落としましょうって
2736000	2738000	結局なっちゃう気がするけどな
2738000	2740000	まあね
2742000	2744000	何かそのソフトウェアの
2744000	2746000	ロジックとして
2746000	2748000	判断する情報が
2748000	2750000	1個2個増えないときついんで
2750000	2752000	何か増やせないかなって
2752000	2754000	なんですけど
2754000	2756000	推定コードも
2756000	2758000	これってあれですね多分加速度センサー
2758000	2760000	多分3つくらい
2760000	2762000	乗っけて
2762000	2764000	軸別々にしてそれぞれの軸で
2764000	2766000	同じくらいの値を示してたら
2766000	2768000	1つのデータとして扱うみたいな
2768000	2770000	加速度計を乗っけて
2770000	2772000	やってると思うんですけど
2772000	2774000	はい
2774000	2776000	それに
2776000	2778000	いいアイディアはないんですけど
2778000	2780000	時速とか他の情報を使って
2780000	2782000	別の
2782000	2784000	技術ベクトルで
2784000	2786000	推定コードの計算値に盛り込めるような
2786000	2788000	ものを作れないかとか
2788000	2790000	そんな話だと思うけど
2792000	2794000	推定コードの算出を
2794000	2796000	2系統3系統でやって
2800000	2802000	でも
2802000	2804000	いいアイディアじゃないな
2804000	2806000	カバレッジが
2806000	2808000	下がる気がする
2808000	2810000	それもそう
2812000	2814000	処理増やす
2814000	2816000	そうですね
2816000	2818000	処理増やすっていうのは
2818000	2820000	故障点も増えますからね
2820000	2822000	とは思ってしまって
2822000	2824000	難しいわ
2824000	2826000	単に増やせばいい問題ではないので
2826000	2828000	効果的に増やさないと
2828000	2830000	意味ないよね
2830000	2832000	機能停止して大丈夫であれば
2832000	2834000	地球上であれば
2834000	2836000	別にいいんだけどな
2838000	2840000	スーパーセントの確率が上がるんだったら
2840000	2842000	いいじゃんの世界ではないんだよな
2846000	2848000	対策されるってことなので
2848000	2850000	対策内容も
2850000	2852000	気になるくらい
2852000	2854000	悩ましいな
2854000	2856000	宇宙関係の
2856000	2858000	失敗報告書は
2858000	2860000	大体そうですけどね
2860000	2862000	こんなんわからんやろ
2862000	2864000	みたいなもんばっかり
2864000	2866000	真にすごいのは
2866000	2868000	それを追い込んでシミュレーションで
2868000	2870000	実際に確認したから
2870000	2872000	真にこれですところまで
2872000	2874000	原因調査を出せるところだよな
2874000	2876000	それはそう
2876000	2878000	マジで
2878000	2880000	何にも手がかりない状態レベルから
2880000	2882000	やってるから
2882000	2884000	探偵レベルですよ
2884000	2886000	本当に
2888000	2890000	その探偵が
2890000	2892000	最低限
2892000	2894000	機能できるだけの情報が
2894000	2896000	ちゃんと
2896000	2898000	装置に組み込まれてるのが素晴らしいですね
2898000	2900000	そうですね
2900000	2902000	さっき堂田さんおっしゃった通り
2902000	2904000	増やせば増やすほど
2904000	2906000	故障点が増えて逆に
2906000	2908000	ミスというか失敗に
2908000	2910000	繋がることになってしまうので
2910000	2912000	むやみ当たらに
2912000	2914000	あらゆるデータを地球に送ればいい
2914000	2916000	というわけじゃないじゃないですか
2916000	2918000	送れるデータ量にも限界があるし
2918000	2920000	そういった中で
2920000	2922000	今回こういった問題が
2922000	2924000	起きた時に
2924000	2926000	解析するだけの情報は
2926000	2928000	拾えてたというあたりとかね
2928000	2930000	優秀だなと思うな
2930000	2932000	そうですね
2932000	2934000	マジでここで積んでしまうと
2934000	2936000	絶望しかないからね
2936000	2938000	そう
2938000	2940000	何かわからんかったけど
2940000	2942000	多分高かったんでしょうねみたいな
2942000	2944000	見解だと投資家は納得しないね
2944000	2946000	というか
2946000	2948000	次飛ばせないからね
2948000	2950000	そう
2950000	2952000	改造もできないし
2958000	2960000	まあ
2960000	2962000	そういう感じなんで
2962000	2964000	とりあえずは実験は成功だということで
2964000	2966000	次に行きたいですねと
2966000	2968000	もちろん次は
2968000	2970000	大いに行きたいですね
2970000	2972000	はい
2974000	2976000	じゃあ次行きます
2976000	2978000	4点目
2978000	2980000	ジュピターAIが出た試したすごい
2980000	2982000	ということで聞いたのを疑似で
2982000	2984000	もうタイトルの通りなんですけど
2984000	2986000	まずジュピターとは何ぞや
2986000	2988000	って話なんですが
2988000	2990000	ジュピター
2990000	2992000	っていうのは一般的にジュピターノートブック
2992000	2994000	っていう言葉の方が
2994000	2996000	聞き馴染みがあるかなというものなんですけれども
2998000	3000000	ウェブ上だったり
3000000	3002000	ブラウザ上で
3002000	3004000	Pythonを実行できるプラットフォームで
3004000	3006000	セクション単位に
3006000	3008000	プログラミングを分けて書けて
3008000	3010000	順次実行ができる
3010000	3012000	環境ですね
3012000	3014000	なので試行錯誤性に
3014000	3016000	非常に長けた環境です
3016000	3018000	Pythonのプログラムを
3018000	3020000	一般的にテキストエディターで書く場合は
3020000	3022000	Pythonのコードを上から下まで書いて
3022000	3024000	全実行全実行
3024000	3026000	もしくはデバッグを実行してステップ実行
3026000	3028000	みたいな感じになりますと
3028000	3030000	で次にもう一つの
3030000	3032000	実行形態としてはPythonコマンドを
3032000	3034000	叩くとPython実行環境
3034000	3036000	コンソールみたいなのが出来上がって
3036000	3038000	その上で一個一個
3038000	3040000	コードを書いていくみたいな感じになりますと
3040000	3042000	でこのJupyter
3042000	3044000	っていうのはそれをもっと
3044000	3046000	中間点を狙った
3046000	3048000	ものになっていて
3048000	3050000	あるセクション単位で
3050000	3052000	プログラミングを書いて実行させて
3052000	3054000	そこまでを実行すると
3054000	3056000	その後別のセクションを書いた時に
3056000	3058000	前のセクションの実行結果を残しつつ
3058000	3060000	実行してくれるという
3060000	3062000	ものです
3062000	3064000	これって何が良いかというと
3064000	3066000	AIのモデル開発とか
3066000	3068000	グラフの作成とかを試行錯誤
3068000	3070000	する場合は
3070000	3072000	データ源は一緒で
3072000	3074000	パラメータを変えてみたらこうだった
3074000	3076000	パラメータを変えてみたらこうだった
3076000	3078000	っていうことでプログラミング全体の
3078000	3080000	一部分だけをちょこちょこ変えて
3080000	3082000	実行するっていうことが多いんですね
3082000	3084000	そういった試行錯誤に
3084000	3086000	非常に向いたプラットフォームとして
3086000	3088000	Jupyterノードプックっていうのが
3088000	3090000	ありまして
3090000	3092000	Web UI上で動くっていう
3092000	3094000	利便性も相まって
3094000	3096000	非常にそういったプラットフォームとしては
3096000	3098000	デファクトなものになっています
3098000	3100000	そのJupyterノードプックに
3100000	3102000	AIが登場しましたと
3102000	3104000	内容としては
3104000	3106000	非常にシンプルで
3106000	3108000	Jupyterノードプックの左側
3108000	3110000	ら辺にChatGPTの
3110000	3112000	ウィンドウが出ていますと
3112000	3114000	そこでいろいろ質問が
3114000	3116000	できるんですけれども
3116000	3118000	ChatGPTの一般的な質問
3118000	3120000	というよりは
3120000	3122000	Jupyterノードプックで書いている
3122000	3124000	プログラムについて質問ができます
3124000	3126000	なので例えば
3126000	3128000	プログラミングのあるセクションとして
3128000	3130000	こんなものをここまで書きました
3130000	3132000	次こんなことしたいんだけど
3132000	3134000	次のセクション作ってくれないみたいなことを言うと
3134000	3136000	次のセクションにあたるプログラミングを
3136000	3138000	生成してくれたりとか
3138000	3140000	あとはJupyterノードプックは
3140000	3142000	他の人もオープンにそのノードプックを
3142000	3144000	公開して情報共有するっていう文化があるんですけれども
3144000	3146000	そのブックを取り込んで
3146000	3148000	ChatGPTに
3148000	3150000	このブックがどういうことをやっている
3150000	3152000	このセクションで何をやっているか教えてくれっていうと
3152000	3154000	最先端のAI開発とか
3154000	3156000	機械学習をやっている人たちの
3156000	3158000	そういったノードブックを
3158000	3160000	元に自分で
3160000	3162000	リバースエンジニアリングしながら勉強できる
3162000	3164000	っていうようなプラットフォームになって
3164000	3166000	いけるので非常に利便性が
3166000	3168000	良いですと
3168000	3170000	この辺のJupyter AI
3170000	3172000	っていうのは
3172000	3174000	ChatGPTのプラグインで
3174000	3176000	似たようなものも
3176000	3178000	出てたんですけれども
3178000	3180000	これはJupyterノードプック側で
3180000	3182000	スターポートされているので
3182000	3184000	今までの使ってきたプラットフォームに
3184000	3186000	一つオープンAIの
3186000	3188000	APIキーを足すだけで
3188000	3190000	いいということで
3190000	3192000	今既にこういう開発している人は
3192000	3194000	簡単にChatGPT
3194000	3196000	ありのプラットフォームに
3196000	3198000	移行できるということで
3198000	3200000	こういうのがどんどん増えていくだろうなということで紹介です
3200000	3202000	はい
3202000	3204000	普通に
3204000	3206000	まずJupyterから
3206000	3208000	いいなって感じなんですけど
3208000	3210000	Jupyterいいでしょ
3210000	3212000	Jupyterいいですね
3212000	3214000	マットラボとかの環境にも展開してくれないですかね
3214000	3216000	仕事で
3216000	3218000	使いたいんですけど
3218000	3220000	っていう感じなんですけど
3220000	3222000	で
3222000	3224000	そのJupyterさんに
3224000	3226000	AIで補助というか
3226000	3228000	これは何て言うんだ
3228000	3230000	AIを被せられるという
3230000	3232000	言い方があるんですけど
3232000	3234000	AI側から
3234000	3236000	ドキュメントの補正をかけられる
3236000	3238000	そうですね
3238000	3240000	なんというか
3240000	3242000	非常に正しい
3242000	3244000	AIの使い方だなという感じですね
3244000	3246000	ちょこちょこ
3246000	3248000	動かすところでAIで補正して
3248000	3250000	パッと出して
3250000	3252000	そのトライアンドエラーの回転数を
3252000	3254000	上げる
3254000	3256000	ということができるというのは
3256000	3258000	非常に便利なので
3258000	3260000	全ての言語は
3260000	3262000	こうなるべきではないんでしょうかという
3262000	3264000	感じがしますね
3264000	3266000	そうですね
3266000	3268000	おっしゃる通りだと思います
3268000	3270000	これでものすごく高速化された
3270000	3272000	ユースケースが
3272000	3274000	1個あってですね
3274000	3276000	このセクションを実行しました
3276000	3278000	エラーが出ました
3278000	3280000	今までだとエラーコードを調べます
3280000	3282000	そのエラーコードの内容と
3282000	3284000	自分の書いたコードが
3284000	3286000	関連あるかどうかを見て
3286000	3288000	直接的なエラー原因なのかどうかを
3288000	3290000	判断し
3290000	3292000	直接的であればそのエラー原因を
3292000	3294000	調査して
3294000	3296000	自分の行動の誤りを見つける
3296000	3298000	間接的であれば
3298000	3300000	本質的なエラーコードが
3300000	3302000	何なのかというのを
3302000	3304000	そのエラーが出るケースというのを
3304000	3306000	調べ直して再探索するみたいなことが
3306000	3308000	発生するわけですね
3308000	3310000	今回のこのJUPITER AIで
3310000	3312000	あれば
3312000	3314000	コードとエラーコード両方見える形で
3314000	3316000	検索ができるので
3316000	3318000	AI側の回答というのが
3318000	3320000	単純にGoogle検索で
3320000	3322000	エラーコードを検索するよりも
3322000	3324000	圧倒的に本質をつく可能性が
3324000	3326000	高まります
3326000	3328000	ので
3328000	3330000	これまでのエラーに対する
3330000	3332000	デバッグが
3332000	3334000	非常に高効率化される
3334000	3336000	だろうと想定されます
3336000	3338000	はい
3338000	3340000	いやーいいですね
3340000	3342000	聞けば結構ほどいいですね
3342000	3344000	という感じですけど
3344000	3346000	JUPITERの話になっちゃうけど
3346000	3348000	これどうやってるの?
3348000	3350000	これ
3350000	3352000	全ての中間ポイント全て保存してるの?
3352000	3354000	これ
3354000	3356000	そうですね
3356000	3358000	Python自体も実は
3358000	3360000	一行実行みたいなことができるようになってて
3360000	3362000	一行実行したものを
3362000	3364000	どんどんメモリに貯めていってくれる
3364000	3366000	という機能があるんですよ
3368000	3370000	Python単便だと一行実行だけ
3370000	3372000	テキストで書くと全実行だけ
3372000	3374000	というところだったのでその間を
3374000	3376000	うまく作っていった感じ
3376000	3378000	セクションごとに実行していっても
3378000	3380000	一番利便性高いだろうし
3380000	3382000	そこで
3382000	3384000	AIが
3384000	3386000	セクション関連を認識しやすくもなると
3386000	3388000	一石二鳥ですねという
3388000	3390000	そうです
3392000	3394000	JUPITERの宣伝になっちゃうけど
3394000	3396000	JUPITERは
3396000	3398000	このコードの外に
3398000	3400000	マークダウンでドキュメントが書けるんですよ
3402000	3404000	例えば
3404000	3406000	最初からドキュメント形式で
3406000	3408000	こういう
3408000	3410000	何でもいいな
3410000	3412000	画像解析を
3412000	3414000	この機器の画像解析を行うための
3414000	3416000	Pythonプログラムです
3416000	3418000	みたいなタイトルをつけて
3418000	3420000	目的とか背景を書いていって
3420000	3422000	まずはこういうことをやる必要があります
3422000	3424000	みたいなことを
3424000	3426000	日本語で書いた下で
3426000	3428000	このプログラミングのセクションが埋め込まれていて
3428000	3430000	このセクションの
3430000	3432000	実行結果はこれですみたいな感じで
3432000	3434000	書いていくと
3434000	3436000	今までプログラミングを書いて
3436000	3438000	実行結果をスクショして
3438000	3440000	ワードに貼るという手順じゃなくて
3440000	3442000	マークダウンに書いている間に
3442000	3444000	実行できるプログラミングが
3444000	3446000	埋め込まれているみたいな状態で
3446000	3448000	書ける
3448000	3450000	なるほどね
3450000	3452000	いいじゃないですか
3452000	3454000	先ほど言ったノートブックの共有文化が
3454000	3456000	あるんですけど
3456000	3458000	それが全てだからって
3458000	3460000	成果物の
3464000	3466000	なるほど
3466000	3468000	そういう文化圏と
3468000	3470000	またこのAI
3470000	3472000	見えている範囲の情報を
3472000	3474000	使って質問できるという
3474000	3476000	ことが
3476000	3478000	ものすごくマッチしている
3478000	3480000	いいケースだと思いますね
3480000	3482000	いいですね
3482000	3484000	この開発環境で開発したい
3484000	3486000	と思います
3486000	3488000	ジュピター自体は
3488000	3490000	ただなので
3490000	3492000	いつでも入れてもらったらいいと思います
3492000	3494000	それはそうですけども
3494000	3496000	APIキーは
3496000	3498000	御社ではなかなか発行できないと思いますけど
3498000	3500000	というか
3500000	3502000	そもそも
3502000	3504000	マトラボなんで
3504000	3506000	ジュピターが使える環境ではないですね
3506000	3508000	マトラボに
3508000	3510000	似たようなのが出てくるといいですね
3510000	3512000	そうですね
3512000	3514000	マトラボさんもかなり開発
3514000	3516000	威力が旺盛なので
3516000	3518000	こういうのも流行っていれば
3518000	3520000	そのうち入れてくれるかもしれないし
3520000	3522000	こういうのが流行るのは
3522000	3524000	いいことだと思うので
3524000	3526000	今後に期待ですねというところですね
3526000	3528000	はい
3528000	3530000	次回ですけどこの件こんなもんです
3530000	3532000	はい
3532000	3534000	じゃあ今日最後ですね
3534000	3536000	5番目
3536000	3538000	GitLeaksで機密情報の漏洩を防ぐ
3538000	3540000	コマンド編
3540000	3542000	ということで
3542000	3544000	デベロッパーズIOの記事です
3544000	3546000	GitLeaksは
3546000	3548000	機密情報の漏洩を防ぐためのツールです
3548000	3550000	簡単なコマンド実行を通して
3550000	3552000	GitLeaksの使用感を記事にしました
3552000	3554000	コマンドの使い方や実際の出力内容が
3554000	3556000	わかるようになっていますということで
3556000	3558000	Gitのセキュリティ管理ツールの
3558000	3560000	お話です
3560000	3562000	Gitに
3562000	3564000	まずこういうセキュリティツールが
3564000	3566000	最近増え出して
3566000	3568000	いまして
3568000	3570000	その背景をお伝えすると
3570000	3572000	ニュースでご存知かもしれない
3572000	3574000	ですが
3574000	3576000	パブリックなGitHubの
3576000	3578000	個人リポジトリにアクセスキー
3578000	3580000	とかを埋め込んでしまって
3580000	3582000	クラウドの費用が
3582000	3584000	多額に発生した
3584000	3586000	ソースコードが流出した
3586000	3588000	あとは個人情報が
3588000	3590000	抜きっこ抜かれた等々
3590000	3592000	いろんなニュースがあります
3592000	3594000	その中には
3594000	3596000	Gitの
3596000	3598000	使い方に対するリテラシーの低さ
3598000	3600000	によって起きた事例も少なく
3600000	3602000	ないです
3602000	3604000	Gitというのはプログラムの
3604000	3606000	構成管理ツールでバージョン管理
3606000	3608000	とか差分チェックとかいろいろできるので
3608000	3610000	非常に便利で
3610000	3612000	あらゆるソフトウェア開発に導入されている
3612000	3614000	ツールではあるんですけれども
3614000	3616000	一方で
3616000	3618000	Gitの中にどんなものが
3618000	3620000	入っていてとかそういう検証はしてくれなくて
3620000	3622000	単純にリフを
3622000	3624000	取ってアップロードするだけという
3624000	3626000	ツールになっています
3626000	3628000	ユーザーが例えば
3628000	3630000	ある
3630000	3632000	一つの塊を
3632000	3634000	GitHub等に
3634000	3636000	アップロードする際
3636000	3638000	あまり考えずに
3638000	3640000	多量な変更を
3640000	3642000	同時にかけて一気に
3642000	3644000	アップロードみたいな事も別に
3644000	3646000	Gitとしては防ぐものではないです
3648000	3650000	GitFlowとかそういった
3650000	3652000	検証の
3652000	3654000	プラクティス的には
3654000	3656000	NGなんですけれども
3656000	3658000	別にツール自体がそれを防いでくれるわけではないです
3658000	3660000	となると
3660000	3662000	Gitをアップロードする時の
3662000	3664000	差分というのが非常に
3664000	3666000	多くなるのでよく分からんから
3666000	3668000	とりあえず今動いてるし上げちゃえ
3668000	3670000	みたいな形で上げたり
3670000	3672000	そもそもなかなか
3672000	3674000	GitのDiffをチェックするという
3674000	3676000	文化すら正直ない
3676000	3678000	現場もあって
3678000	3680000	そういうのがやっぱり続いてしまうと
3680000	3682000	どうしても
3682000	3684000	こういった機密情報の漏洩というのが
3684000	3686000	無くならない
3686000	3688000	という背景があって
3688000	3690000	このGitを拡張する形で
3690000	3692000	そういうセキュリティチェックが
3692000	3694000	自動的にかかるといいよね
3694000	3696000	ということで色んなツールが出始めてます
3696000	3698000	という背景があります
3698000	3700000	最もメジャーなものは
3700000	3702000	GitSecretsという
3702000	3704000	サービスがあって
3704000	3706000	それはGitで
3706000	3708000	データをアップロードする際に
3708000	3710000	チェックをしてくれて
3710000	3712000	こんなものが入ってるから
3712000	3714000	これをアップロードしたら
3714000	3716000	まずくないっていうのをチェックしてくれるものですね
3716000	3718000	あとはGitHubにも
3718000	3720000	自分のリポジトリに
3720000	3722000	上がってくるデータの中に
3722000	3724000	そういうものが入ってたらちょっとまずくないって言って
3724000	3726000	止めてくれるとか
3726000	3728000	そういった機能が最新リリースとして
3728000	3730000	入ってきてたりします
3730000	3732000	そんな中でこのGitLeaksです
3732000	3734000	ではもっと直接的に
3734000	3736000	ユーザーが自己チェックできるところまで
3736000	3738000	幅を広げている
3738000	3740000	ツールです
3740000	3742000	GitLeaksでは
3742000	3744000	今自分が開発している
3744000	3746000	差分
3746000	3748000	最新の
3748000	3750000	リポジトリの状態と
3750000	3752000	自分のローカルな手元の状態の
3752000	3754000	差分を見た時に
3754000	3756000	その差分に
3756000	3758000	変なものが埋め込まれてないかっていう検出を
3758000	3760000	かけたりとか
3760000	3762000	あとはそのコミットをする前
3762000	3764000	もう本当に今
3764000	3766000	修正している
3766000	3768000	今の状態で変なものが含まれてないか
3768000	3770000	っていうチェックをかけたりとか
3770000	3772000	いうことができるので
3772000	3774000	自分がそういった情報に気になったタイミングで
3774000	3776000	即チェックをかけられるというのが
3776000	3778000	大きなポイントですね
3778000	3780000	なので
3780000	3782000	これはGitSecretsと
3782000	3784000	併用することも
3784000	3786000	全然ありで
3786000	3788000	GitSecretsはアップロードする際の
3788000	3790000	最終防波堤として導入
3790000	3792000	このGitLinksは
3792000	3794000	自分が
3794000	3796000	開発する時に
3796000	3798000	そういえば今までどのように開発していたけど
3798000	3800000	今のリポジトリの状態って本当に
3800000	3802000	機密情報含まれてないんだろうか
3802000	3804000	安全なんだろうかというのをチェックするために
3804000	3806000	使う
3806000	3808000	あとは
3808000	3810000	今までローカルでずっと
3810000	3812000	開発していたけど
3812000	3814000	他の人が欲しがっているから
3814000	3816000	クラウドや
3816000	3818000	社内の
3818000	3820000	Gitサーバーにアップロードしよう
3820000	3822000	ってなる直前でこれをかけると
3822000	3824000	過去のGit履歴を
3824000	3826000	遡ってチェックしてくれます
3826000	3828000	過去のGit履歴を
3828000	3830000	遡ってチェックしてくれるというのは
3830000	3832000	非常に重要で
3832000	3834000	Gitというのは
3834000	3836000	全てのこれまでの更新履歴を
3836000	3838000	残しているツールなので
3838000	3840000	一時的にアクセスキーを
3840000	3842000	追加してしまって
3842000	3844000	そういえばこういうアクセスキーって入れちゃいけないんだ
3844000	3846000	って決して込みとして
3846000	3848000	最新状態にして
3848000	3850000	パッと見なかったとしても
3850000	3852000	Gitの履歴を追ったら
3852000	3854000	そのキーは拾えてしまうので
3854000	3856000	そういったところにも
3856000	3858000	含まれないようにしなければならないです
3858000	3860000	そういう過去に
3860000	3862000	遡ってそういうキーを
3862000	3864000	全削除したりとか
3864000	3866000	そういうファイルを消すみたいな
3866000	3868000	Gitのコマンドもあるんですけど
3868000	3870000	なかなかそこまで行くと
3870000	3872000	Git初心者の人には
3872000	3874000	探し方もわからないっていうことも
3874000	3876000	そういった面でも
3876000	3878000	このGitLinuxは非常に便利かなと思って
3878000	3880000	紹介です
3882000	3884000	確かに
3884000	3886000	Gitという性質上
3886000	3888000	コミットする前に
3888000	3890000	見れる
3890000	3892000	っていうのは非常に有用かな
3892000	3894000	と思いますと
3896000	3898000	何でしょうね
3900000	3902000	でもなんか聞いてて
3902000	3904000	思ったけど
3904000	3906000	このツールは非常に有用だし
3906000	3908000	分かっている人が使えばいいんですけど
3908000	3910000	最終防波堤として
3910000	3912000	分かっていない人間が
3912000	3914000	使われてしまうと
3914000	3916000	結局コミットされちゃうなと
3916000	3918000	勇気が
3918000	3920000	しちゃうな
3920000	3922000	これがチェックツールとして
3924000	3926000	チェックツールとして
3926000	3928000	GoのGo判断を出してくれて
3928000	3930000	それを
3930000	3932000	自分側がチェックして
3932000	3934000	確認すれば
3934000	3936000	なんとかなるはなるか
3936000	3938000	そういう意味では
3938000	3940000	自分が何書いているか分からなくても
3940000	3942000	フラグが立つっていうのは非常に重要
3942000	3944000	なので
3944000	3946000	そういう意味で普通に
3946000	3948000	有用なツールっていうのは
3948000	3950000	そうですね
3954000	3956000	今後GitHubとかの
3956000	3958000	改善も必要にはなってくるんですけど
3958000	3960000	最近GitHubでは
3962000	3964000	プリのプルリクエスト
3964000	3966000	レビューみたいなのがローカルで
3966000	3968000	見れるようになりました
3968000	3970000	イメージとしてはプレビュー版みたいな
3970000	3972000	形で見れるんですけど
3972000	3974000	今までプルリクエスト
3974000	3976000	っていうのはGitの
3976000	3978000	構成管理サーバーに上がった
3978000	3980000	ソースコード2つを比較して
3980000	3982000	これをマージしようとする
3982000	3984000	くっつけようとするけどいいですかっていうのを
3984000	3986000	第三者にレビューしてもらう機能として
3986000	3988000	できてたんですが
3988000	3990000	それがクラウド上のサブになって
3990000	3992000	間違いがあるって分かった時に
3992000	3994000	今回のようなアクセスキーの
3994000	3996000	問題だと
3996000	3998000	そのエラーが見つかっている時点で
3998000	4000000	手遅れというかアウトなんですよね
4000000	4002000	公開されちゃっているというか
4002000	4004000	なので
4004000	4006000	アップロードする前に
4006000	4008000	チェックするというのが非常に大事なんですが
4008000	4010000	プルリクエストでも同様に
4010000	4012000	そのチェックが手元でできるようになりました
4012000	4014000	そこで
4014000	4016000	リフも見れるようになったので
4016000	4018000	今まで以上にリフに気づけやすい環境が
4018000	4020000	できつつあるんですけれども
4020000	4022000	今回のようなツールをそのタイミングで
4022000	4024000	強制的にかけられるようにするとか
4024000	4026000	そういう拡張が
4026000	4028000	登場してくるともしかすれば
4030000	4032000	そういう
4032000	4034000	開発環境を社内で
4034000	4036000	広めてこの環境で使えよっていうように
4036000	4038000	指示していれば
4038000	4040000	定理デラシーでも
4040000	4042000	なんとか乗っかれるとか
4042000	4044000	そういう環境を
4044000	4046000	作っていけるかもしれないです
4046000	4048000	なるほど
4048000	4050000	確かに
4050000	4052000	ツール側でも
4052000	4054000	何かのフラグが立ったら
4054000	4056000	そもそもコミットボタンを押せないとか
4056000	4058000	そこまでいければ
4058000	4060000	いいのかな
4060000	4062000	確かにですね
4062000	4064000	なるほどね
4064000	4066000	まあ
4066000	4068000	必要だなと思うし
4068000	4070000	導入するのは完璧同意ですけど
4070000	4072000	なんかこう
4072000	4074000	Gitってすごい便利だよね
4074000	4076000	というところから
4076000	4078000	遠いところまで来たなと遠い目になりますね
4080000	4082000	そうですね
4082000	4084000	こういう問題が
4084000	4086000	騒がれだす時点でようやく
4086000	4088000	業界的にデファクトになってきたな
4088000	4090000	って感じですかね
4090000	4092000	まあそれはそうですね
4092000	4094000	リテラシーの低い人でも
4094000	4096000	使うようになってきたということは
4096000	4098000	ある意味
4098000	4100000	喜ばしいことですね
4100000	4102000	そうですね
4102000	4104000	SVN時代のパブリックサーバーなんてないですから
4108000	4110000	なるほど
4110000	4112000	あと
4112000	4114000	どうぞ
4114000	4116000	大した話じゃない
4116000	4118000	GitLinuxって名前はどうなのってちょっと思ったんだけど
4118000	4120000	確かに
4120000	4122000	リークさせる方じゃん
4122000	4124000	と思ったんで
4124000	4126000	GitとVirusで
4126000	4128000	流行ったのかなと思ってしまいましたね
4128000	4130000	確かに
4130000	4132000	名前よくないね
4132000	4134000	なんでこれにしたんだろう
4134000	4136000	たしかし
4136000	4138000	まあそのくらい
4138000	4140000	リークという言葉が
4140000	4142000	和製英語なのかもしれないけど
4144000	4146000	そんなことはないでしょう
4146000	4148000	そんなことない
4148000	4150000	リークはだって
4150000	4152000	リーク
4152000	4154000	ほら機体配管の
4154000	4156000	リークとか言うじゃん
4156000	4158000	そうね
4158000	4160000	そうだね
4160000	4162000	ちゃんと語源からしてちゃんと漏れる
4162000	4164000	Git漏れるだね
4164000	4166000	Git漏れるだね
4166000	4168000	というところです
4168000	4170000	漏れてるね
4170000	4172000	アンティークとかじゃ食べられないでしょうか
4172000	4174000	そうですね
4174000	4176000	解明のリクエストを本気に送った方が
4176000	4178000	良さそうな気がしますね
4178000	4180000	はいはい
4180000	4182000	じゃあ今日はこんなところですかね
4182000	4184000	はい
4184000	4186000	本日の内容は書の音にまとめていますので
4186000	4188000	ご確認ください
4188000	4190000	リカログでご感想や
4190000	4192000	こんなことを話してほしい
4192000	4194000	といったこともお待ちしています
4194000	4196000	メールアドレスは
4196000	4198000	リカログあたまくじみる.comになります
4198000	4200000	ツイッターもやっていますので
4200000	4202000	フォローやダイレクトメッセージもお待ちしています
4202000	4204000	本番組は
4204000	4206000	podcast.spotify.youtubeで聞くことができます
4206000	4208000	そちらでも
4208000	4210000	サブスクライブよろしくお願いいたします
4210000	4212000	ありがとうございました
4212000	4214000	お疲れ様でした
